[
  {
    "objectID": "2021-06/day6.html",
    "href": "2021-06/day6.html",
    "title": "Day 6",
    "section": "",
    "text": "Day 6\n\n#########################\n######### Day 5 #########\n#########################\nrm(list = ls())\n\nstart_p1 &lt;- Sys.time()\n\ndata &lt;- readLines(\"day6.txt\")\n\ndata &lt;- strsplit(data, \",\")\ndata[[1]] &lt;- as.numeric(data[[1]])\ndata[2:81] &lt;- numeric(1)\n\nfor(x in 2:length(data)){\n  \n  # if(x == 1) next # return(data[[x]])\n  \n  data[[x]] &lt;- data[[x-1]] - 1\n  \n  data[[x]] &lt;- c(data[[x]], rep(8, length(which(data[[x]] == -1))))\n  \n  data[[x]] &lt;- ifelse(data[[x]] == -1, 6, data[[x]])\n  \n}\n\n# Solution\nlength(data[[81]])\n\n[1] 374927\n\nend_p1 &lt;- Sys.time()\n\n\n\n### Part 2 ###\nstart_p2 &lt;- Sys.time()\n\nsuppressMessages(library(dplyr))\n\ncounts &lt;- data.frame(count = c(0, tabulate(data[[1]], nbins = 8)))\ncounts$name &lt;- 0:8\ncounts &lt;- counts[, c(\"name\", \"count\")]\n\n\nfor(i in 1:256){\n  \n  if(i &gt; 1){\n    counts$count &lt;- counts$new_count\n  } else {\n    counts$new_count &lt;- NA\n  }\n  \n  counts &lt;- counts %&gt;% \n    mutate(new_count = lead(count, default = 0))\n  \n  zeros &lt;- counts$count[which(counts$name == 0)]\n  counts$new_count[which(counts$name == 6)] &lt;- counts$new_count[which(counts$name == 6)] + zeros\n  counts$new_count[which(counts$name == 8)] &lt;- counts$new_count[which(counts$name == 8)] + zeros\n\n}\n\noptions(digits = 22)\n\n# Solution\nsum(counts$new_count)\n\n[1] 1687617803407\n\nend_p2 &lt;- Sys.time()\n\ndifftime(end_p1, start_p1)\n\nTime difference of 0.1199700832366943359375 secs\n\ndifftime(end_p2, start_p2)\n\nTime difference of 0.2832443714141845703125 secs",
    "crumbs": [
      "2021",
      "Day 6"
    ]
  },
  {
    "objectID": "2022-02/day2.html",
    "href": "2022-02/day2.html",
    "title": "Day 2",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.\nFor example, suppose you were given the following strategy guide:\nA Y B X C Z This strategy guide predicts and recommends the following:\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won). In the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0). The third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\nWhat would your total score be if everything goes exactly according to your strategy guide?\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# first:  A for Rock, B for Paper, and C for Scissors\n# second:  X for Rock, Y for Paper, and Z for Scissors\nreadLines(\"day2.txt\") %&gt;% \n  tibble(input = .) %&gt;% \n  tidyr::separate(input, into = c(\"first\", \"second\")) %&gt;% \n  mutate(winner = case_when(first == \"A\" & second == \"X\" ~ 3,\n                            first == \"A\" & second == \"Y\" ~ 6,\n                            first == \"A\" & second == \"Z\" ~ 0,\n                            first == \"B\" & second == \"X\" ~ 0,\n                            first == \"B\" & second == \"Y\" ~ 3,\n                            first == \"B\" & second == \"Z\" ~ 6,\n                            first == \"C\" & second == \"X\" ~ 6,\n                            first == \"C\" & second == \"Y\" ~ 0,\n                            first == \"C\" & second == \"Z\" ~ 3),\n         type = case_when(second == \"X\" ~ 1,\n                          second == \"Y\" ~ 2,\n                          second == \"Z\" ~ 3),\n         score = winner + type) %&gt;%\n  pull(score) %&gt;% \n  sum()\n\n[1] 12740\n\n\n\n\n\n— Part Two — The Elf finishes helping with the tent and sneaks back over to you. “Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!”\nThe total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:\nIn the first round, your opponent will choose Rock (A), and you need the round to end in a draw (Y), so you also choose Rock. This gives you a score of 1 + 3 = 4. In the second round, your opponent will choose Paper (B), and you choose Rock so you lose (X) with a score of 1 + 0 = 1. In the third round, you will defeat your opponent’s Scissors with Rock for a score of 1 + 6 = 7. Now that you’re correctly decrypting the ultra top secret strategy guide, you would get a total score of 12.\nFollowing the Elf’s instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?\n\nlibrary(dplyr)\n\nreadLines(\"day2.txt\") %&gt;% \n  tibble(input = .) %&gt;% \n  tidyr::separate(input, into = c(\"first\", \"second\")) %&gt;%\n  mutate(strat = case_when(first == \"A\" & second == \"X\" ~ \"lose;s\",\n                           first == \"A\" & second == \"Y\" ~ \"draw;r\",\n                           first == \"A\" & second == \"Z\" ~ \"win;p\",\n                           first == \"B\" & second == \"X\" ~ \"lose;r\",\n                           first == \"B\" & second == \"Y\" ~ \"draw;p\",\n                           first == \"B\" & second == \"Z\" ~ \"win;s\",\n                           first == \"C\" & second == \"X\" ~ \"lose;p\",\n                           first == \"C\" & second == \"Y\" ~ \"draw;s\",\n                           first == \"C\" & second == \"Z\" ~ \"win;r\")) %&gt;% \n  tidyr::separate(strat, into = c(\"result\", \"strat\")) %&gt;% \n  mutate(result = case_when(result == \"lose\" ~ 0,\n                            result == \"draw\" ~ 3,\n                            result == \"win\" ~ 6),\n         strat = case_when(strat == \"r\" ~ 1,\n                           strat == \"p\" ~ 2,\n                           strat == \"s\" ~ 3),\n         score = result + strat) %&gt;% \n  pull(score) %&gt;% \n  sum()\n\n[1] 11980",
    "crumbs": [
      "2022",
      "Day 2"
    ]
  },
  {
    "objectID": "2022-02/day2.html#rock-paper-scissors",
    "href": "2022-02/day2.html#rock-paper-scissors",
    "title": "Day 2",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.\nFor example, suppose you were given the following strategy guide:\nA Y B X C Z This strategy guide predicts and recommends the following:\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won). In the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0). The third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\nWhat would your total score be if everything goes exactly according to your strategy guide?\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# first:  A for Rock, B for Paper, and C for Scissors\n# second:  X for Rock, Y for Paper, and Z for Scissors\nreadLines(\"day2.txt\") %&gt;% \n  tibble(input = .) %&gt;% \n  tidyr::separate(input, into = c(\"first\", \"second\")) %&gt;% \n  mutate(winner = case_when(first == \"A\" & second == \"X\" ~ 3,\n                            first == \"A\" & second == \"Y\" ~ 6,\n                            first == \"A\" & second == \"Z\" ~ 0,\n                            first == \"B\" & second == \"X\" ~ 0,\n                            first == \"B\" & second == \"Y\" ~ 3,\n                            first == \"B\" & second == \"Z\" ~ 6,\n                            first == \"C\" & second == \"X\" ~ 6,\n                            first == \"C\" & second == \"Y\" ~ 0,\n                            first == \"C\" & second == \"Z\" ~ 3),\n         type = case_when(second == \"X\" ~ 1,\n                          second == \"Y\" ~ 2,\n                          second == \"Z\" ~ 3),\n         score = winner + type) %&gt;%\n  pull(score) %&gt;% \n  sum()\n\n[1] 12740",
    "crumbs": [
      "2022",
      "Day 2"
    ]
  },
  {
    "objectID": "2022-02/day2.html#part-2",
    "href": "2022-02/day2.html#part-2",
    "title": "Day 2",
    "section": "",
    "text": "— Part Two — The Elf finishes helping with the tent and sneaks back over to you. “Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!”\nThe total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:\nIn the first round, your opponent will choose Rock (A), and you need the round to end in a draw (Y), so you also choose Rock. This gives you a score of 1 + 3 = 4. In the second round, your opponent will choose Paper (B), and you choose Rock so you lose (X) with a score of 1 + 0 = 1. In the third round, you will defeat your opponent’s Scissors with Rock for a score of 1 + 6 = 7. Now that you’re correctly decrypting the ultra top secret strategy guide, you would get a total score of 12.\nFollowing the Elf’s instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?\n\nlibrary(dplyr)\n\nreadLines(\"day2.txt\") %&gt;% \n  tibble(input = .) %&gt;% \n  tidyr::separate(input, into = c(\"first\", \"second\")) %&gt;%\n  mutate(strat = case_when(first == \"A\" & second == \"X\" ~ \"lose;s\",\n                           first == \"A\" & second == \"Y\" ~ \"draw;r\",\n                           first == \"A\" & second == \"Z\" ~ \"win;p\",\n                           first == \"B\" & second == \"X\" ~ \"lose;r\",\n                           first == \"B\" & second == \"Y\" ~ \"draw;p\",\n                           first == \"B\" & second == \"Z\" ~ \"win;s\",\n                           first == \"C\" & second == \"X\" ~ \"lose;p\",\n                           first == \"C\" & second == \"Y\" ~ \"draw;s\",\n                           first == \"C\" & second == \"Z\" ~ \"win;r\")) %&gt;% \n  tidyr::separate(strat, into = c(\"result\", \"strat\")) %&gt;% \n  mutate(result = case_when(result == \"lose\" ~ 0,\n                            result == \"draw\" ~ 3,\n                            result == \"win\" ~ 6),\n         strat = case_when(strat == \"r\" ~ 1,\n                           strat == \"p\" ~ 2,\n                           strat == \"s\" ~ 3),\n         score = result + strat) %&gt;% \n  pull(score) %&gt;% \n  sum()\n\n[1] 11980",
    "crumbs": [
      "2022",
      "Day 2"
    ]
  },
  {
    "objectID": "2024-01/day1.html",
    "href": "2024-01/day1.html",
    "title": "Day 1",
    "section": "",
    "text": "The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.\nAs each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they’ll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\nTo begin, get your puzzle input.\n\nraw &lt;- readLines(\"data.txt\")\n\nsplit &lt;- strsplit(raw, \"\\\\s+\")\n\nnums &lt;- data.frame(left = sort(as.numeric(sapply(split, \"[[\", 1))),\n                   right = sort(as.numeric(sapply(split, \"[[\", 2))))\n\nnums$diff &lt;- abs(nums$left - nums$right)\n\nsum(nums$diff)\n\n[1] 2031679\n\n\n— Part Two —\nYour analysis only confirmed what everyone feared: the two lists of location IDs are indeed very different.\nOr are they?\nThe Historians can’t agree on which group made the mistakes or how to read most of the Chief’s handwriting, but in the commotion you notice an interesting detail: a lot of location IDs appear in both lists! Maybe the other numbers aren’t location IDs at all but rather misinterpreted handwriting.\nThis time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nHere are the same example lists again:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nFor these example lists, here is the process of finding the similarity score:\n\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.\nThe second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.\nThe third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).\nThe fourth number, 1, also does not appear in the right list.\nThe fifth number, 3, appears in the right list three times; the similarity score increases by 9.\nThe last number, 3, appears in the right list three times; the similarity score again increases by 9.\n\nSo, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\n\nlapply(nums$left, \\(x) {\n  \n  multiplier &lt;- length(which(nums$right == x))\n  \n  x * multiplier\n  \n  \n}) |&gt; unlist() |&gt; sum()\n\n[1] 19678534",
    "crumbs": [
      "2024",
      "Day 1"
    ]
  },
  {
    "objectID": "2024-01/day1.html#historian-hysteria",
    "href": "2024-01/day1.html#historian-hysteria",
    "title": "Day 1",
    "section": "",
    "text": "The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.\nAs each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they’ll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\nTo begin, get your puzzle input.\n\nraw &lt;- readLines(\"data.txt\")\n\nsplit &lt;- strsplit(raw, \"\\\\s+\")\n\nnums &lt;- data.frame(left = sort(as.numeric(sapply(split, \"[[\", 1))),\n                   right = sort(as.numeric(sapply(split, \"[[\", 2))))\n\nnums$diff &lt;- abs(nums$left - nums$right)\n\nsum(nums$diff)\n\n[1] 2031679\n\n\n— Part Two —\nYour analysis only confirmed what everyone feared: the two lists of location IDs are indeed very different.\nOr are they?\nThe Historians can’t agree on which group made the mistakes or how to read most of the Chief’s handwriting, but in the commotion you notice an interesting detail: a lot of location IDs appear in both lists! Maybe the other numbers aren’t location IDs at all but rather misinterpreted handwriting.\nThis time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nHere are the same example lists again:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nFor these example lists, here is the process of finding the similarity score:\n\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.\nThe second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.\nThe third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).\nThe fourth number, 1, also does not appear in the right list.\nThe fifth number, 3, appears in the right list three times; the similarity score increases by 9.\nThe last number, 3, appears in the right list three times; the similarity score again increases by 9.\n\nSo, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\n\nlapply(nums$left, \\(x) {\n  \n  multiplier &lt;- length(which(nums$right == x))\n  \n  x * multiplier\n  \n  \n}) |&gt; unlist() |&gt; sum()\n\n[1] 19678534",
    "crumbs": [
      "2024",
      "Day 1"
    ]
  },
  {
    "objectID": "2022-07/day7.html",
    "href": "2022-07/day7.html",
    "title": "Day 7:",
    "section": "",
    "text": "You can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?\nThe device the Elves gave you has problems with more than just its communication system. You try to run a system update:\n$ system-update --please --pretty-please-with-sugar-on-top \nError: No space left on device\nPerhaps you can delete some files to make space for the update?\nYou browse around the filesystem to assess the situation and save the resulting terminal output (your puzzle input). For example:\n$ cd /\n$ ls\ndir a\n14848514 b.txt\n8504156 c.dat\ndir d\n$ cd a\n$ ls\ndir e\n29116 f\n2557 g\n62596 h.lst\n$ cd e\n$ ls\n584 i\n$ cd ..\n$ cd ..\n$ cd d\n$ ls\n4060174 j\n8033020 d.log\n5626152 d.ext\n7214296 k\nThe filesystem consists of a tree of files (plain data) and directories (which can contain other directories or files). The outermost directory is called /. You can navigate around the filesystem, moving into or out of directories and listing the contents of the directory you’re currently in.\nWithin the terminal output, lines that begin with $ are commands you executed, very much like some modern computers:\ncd means change directory. This changes which directory is the current directory, but the specific result depends on the argument: cd x moves in one level: it looks in the current directory for the directory named x and makes it the current directory. cd .. moves out one level: it finds the directory that contains the current directory, then makes that directory the current directory. cd / switches the current directory to the outermost directory, /. ls means list. It prints out all of the files and directories immediately contained by the current directory: 123 abc means that the current directory contains a file named abc with size 123. dir xyz means that the current directory contains a directory named xyz. Given the commands and output in the example above, you can determine that the filesystem looks visually like this:\n- / (dir)\n  - a (dir)\n    - e (dir)\n      - i (file, size=584)\n    - f (file, size=29116)\n    - g (file, size=2557)\n    - h.lst (file, size=62596)\n  - b.txt (file, size=14848514)\n  - c.dat (file, size=8504156)\n  - d (dir)\n    - j (file, size=4060174)\n    - d.log (file, size=8033020)\n    - d.ext (file, size=5626152)\n    - k (file, size=7214296)\nHere, there are four directories: / (the outermost directory), a and d (which are in /), and e (which is in a). These directories also contain files of various sizes.\nSince the disk is full, your first step should probably be to find directories that are good candidates for deletion. To do this, you need to determine the total size of each directory. The total size of a directory is the sum of the sizes of the files it contains, directly or indirectly. (Directories themselves do not count as having any intrinsic size.)\nThe total sizes of the directories above can be found as follows:\nThe total size of directory e is 584 because it contains a single file i of size 584 and no other directories. The directory a has total size 94853 because it contains files f (size 29116), g (size 2557), and h.lst (size 62596), plus file i indirectly (a contains e which contains i). Directory d has total size 24933642. As the outermost directory, / contains every file. Its total size is 48381165, the sum of the size of every file. To begin, find all of the directories with a total size of at most 100000, then calculate the sum of their total sizes. In the example above, these directories are a and e; the sum of their total sizes is 95437 (94853 + 584). (As in this example, this process can count files more than once!)\nFind all of the directories with a total size of at most 100000. What is the sum of the total sizes of those directories?\n\nlibrary(stringr)\n\ninput &lt;- readLines(\"day7.txt\")\n\nterm_log &lt;- data.frame(input)\nterm_log$level &lt;- 0\n\nfor(i in 2:nrow(term_log)){\n  term_log$level[i] &lt;- ifelse(grepl(\"^\\\\$\\\\scd\\\\s[A-Za-z]+$\", term_log$input[i]), term_log$level[i-1] + 1,\n                       ifelse(grepl(\"^\\\\$\\\\scd\\\\s\\\\.\\\\.(.*?)$\", term_log$input[i]), term_log$level[i-1] - 1,\n                              term_log$level[i-1]))\n}\n\n# $ cd ..\n\n\nterm_log$is_dir &lt;- grepl(\"\\\\$\\\\scd\\\\s[A-Za-z\\\\/]+\", term_log$input)\n\nterm_log$folder &lt;- NA\nterm_log$folder[which(term_log$is_dir)] &lt;- sapply(strsplit(term_log$input[which(term_log$is_dir)], \"\\\\s\"), \"[[\", 3) \n\nterm_log$file_size &lt;- stringr::str_extract(term_log$input, \"^[0-9]+\") %&gt;% as.numeric()\n\nfolder_list &lt;- list()\n\nfor(i in 1:nrow(term_log)){\n  \n  if(term_log$is_dir[i] == FALSE){\n    next\n  }\n  \n  start &lt;- i\n  curr_level &lt;- term_log$level[i]\n  end &lt;- NA\n  \n  for(j in start:nrow(term_log)){\n    if(input[j] == \"$ cd ..\" & term_log$level[j] == curr_level-1){\n      end &lt;- j\n      break\n    } else if(j == nrow(term_log)){\n      end &lt;- j\n      break\n    }\n  }\n  \n  tmp &lt;- data.frame(folder = term_log$folder[i],\n                    file_size = term_log$file_size[start:end])\n  \n  folder_list[[i]] &lt;- sum(tmp$file_size[which(is.na(tmp$file_size) == FALSE)])\n}\n\nfolders &lt;- unlist(folder_list)\n\nfolders[which(folders &lt; 100000)] |&gt; sum()\n\n[1] 2061777\n\n\n\n\n\n— Part Two —\nNow, you’re ready to choose a directory to delete.\nThe total disk space available to the filesystem is 70000000. To run the update, you need unused space of at least 30000000. You need to find a directory you can delete that will free up enough space to run the update.\nIn the example above, the total size of the outermost directory (and thus the total amount of used space) is 48381165; this means that the size of the unused space must currently be 21618835, which isn’t quite the 30000000 required by the update. Therefore, the update still requires a directory with total size of at least 8381165 to be deleted before it can run.\nTo achieve this, you have the following options:\nDelete directory e, which would increase unused space by 584. Delete directory a, which would increase unused space by 94853. Delete directory d, which would increase unused space by 24933642. Delete directory /, which would increase unused space by 48381165. Directories e and a are both too small; deleting them would not free up enough space. However, directories d and / are both big enough! Between these, choose the smallest: d, increasing unused space by 24933642.\nFind the smallest directory that, if deleted, would free up enough space on the filesystem to run the update. What is the total size of that directory?\n\ntotal_space &lt;- 70000000\nneeded_space &lt;- 30000000\n\ncurrent_space &lt;- total_space - sum(term_log$file_size, na.rm = TRUE)\n\nmin_space_to_free &lt;- needed_space - current_space\n\nrelevant_folders &lt;- folders[which(folders &gt; min_space_to_free)]\n\nrelevant_folders[which.min(abs(relevant_folders - min_space_to_free))]\n\n[1] 4473403",
    "crumbs": [
      "2022",
      "Day 7:"
    ]
  },
  {
    "objectID": "2022-07/day7.html#no-space-left-on-device",
    "href": "2022-07/day7.html#no-space-left-on-device",
    "title": "Day 7:",
    "section": "",
    "text": "You can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?\nThe device the Elves gave you has problems with more than just its communication system. You try to run a system update:\n$ system-update --please --pretty-please-with-sugar-on-top \nError: No space left on device\nPerhaps you can delete some files to make space for the update?\nYou browse around the filesystem to assess the situation and save the resulting terminal output (your puzzle input). For example:\n$ cd /\n$ ls\ndir a\n14848514 b.txt\n8504156 c.dat\ndir d\n$ cd a\n$ ls\ndir e\n29116 f\n2557 g\n62596 h.lst\n$ cd e\n$ ls\n584 i\n$ cd ..\n$ cd ..\n$ cd d\n$ ls\n4060174 j\n8033020 d.log\n5626152 d.ext\n7214296 k\nThe filesystem consists of a tree of files (plain data) and directories (which can contain other directories or files). The outermost directory is called /. You can navigate around the filesystem, moving into or out of directories and listing the contents of the directory you’re currently in.\nWithin the terminal output, lines that begin with $ are commands you executed, very much like some modern computers:\ncd means change directory. This changes which directory is the current directory, but the specific result depends on the argument: cd x moves in one level: it looks in the current directory for the directory named x and makes it the current directory. cd .. moves out one level: it finds the directory that contains the current directory, then makes that directory the current directory. cd / switches the current directory to the outermost directory, /. ls means list. It prints out all of the files and directories immediately contained by the current directory: 123 abc means that the current directory contains a file named abc with size 123. dir xyz means that the current directory contains a directory named xyz. Given the commands and output in the example above, you can determine that the filesystem looks visually like this:\n- / (dir)\n  - a (dir)\n    - e (dir)\n      - i (file, size=584)\n    - f (file, size=29116)\n    - g (file, size=2557)\n    - h.lst (file, size=62596)\n  - b.txt (file, size=14848514)\n  - c.dat (file, size=8504156)\n  - d (dir)\n    - j (file, size=4060174)\n    - d.log (file, size=8033020)\n    - d.ext (file, size=5626152)\n    - k (file, size=7214296)\nHere, there are four directories: / (the outermost directory), a and d (which are in /), and e (which is in a). These directories also contain files of various sizes.\nSince the disk is full, your first step should probably be to find directories that are good candidates for deletion. To do this, you need to determine the total size of each directory. The total size of a directory is the sum of the sizes of the files it contains, directly or indirectly. (Directories themselves do not count as having any intrinsic size.)\nThe total sizes of the directories above can be found as follows:\nThe total size of directory e is 584 because it contains a single file i of size 584 and no other directories. The directory a has total size 94853 because it contains files f (size 29116), g (size 2557), and h.lst (size 62596), plus file i indirectly (a contains e which contains i). Directory d has total size 24933642. As the outermost directory, / contains every file. Its total size is 48381165, the sum of the size of every file. To begin, find all of the directories with a total size of at most 100000, then calculate the sum of their total sizes. In the example above, these directories are a and e; the sum of their total sizes is 95437 (94853 + 584). (As in this example, this process can count files more than once!)\nFind all of the directories with a total size of at most 100000. What is the sum of the total sizes of those directories?\n\nlibrary(stringr)\n\ninput &lt;- readLines(\"day7.txt\")\n\nterm_log &lt;- data.frame(input)\nterm_log$level &lt;- 0\n\nfor(i in 2:nrow(term_log)){\n  term_log$level[i] &lt;- ifelse(grepl(\"^\\\\$\\\\scd\\\\s[A-Za-z]+$\", term_log$input[i]), term_log$level[i-1] + 1,\n                       ifelse(grepl(\"^\\\\$\\\\scd\\\\s\\\\.\\\\.(.*?)$\", term_log$input[i]), term_log$level[i-1] - 1,\n                              term_log$level[i-1]))\n}\n\n# $ cd ..\n\n\nterm_log$is_dir &lt;- grepl(\"\\\\$\\\\scd\\\\s[A-Za-z\\\\/]+\", term_log$input)\n\nterm_log$folder &lt;- NA\nterm_log$folder[which(term_log$is_dir)] &lt;- sapply(strsplit(term_log$input[which(term_log$is_dir)], \"\\\\s\"), \"[[\", 3) \n\nterm_log$file_size &lt;- stringr::str_extract(term_log$input, \"^[0-9]+\") %&gt;% as.numeric()\n\nfolder_list &lt;- list()\n\nfor(i in 1:nrow(term_log)){\n  \n  if(term_log$is_dir[i] == FALSE){\n    next\n  }\n  \n  start &lt;- i\n  curr_level &lt;- term_log$level[i]\n  end &lt;- NA\n  \n  for(j in start:nrow(term_log)){\n    if(input[j] == \"$ cd ..\" & term_log$level[j] == curr_level-1){\n      end &lt;- j\n      break\n    } else if(j == nrow(term_log)){\n      end &lt;- j\n      break\n    }\n  }\n  \n  tmp &lt;- data.frame(folder = term_log$folder[i],\n                    file_size = term_log$file_size[start:end])\n  \n  folder_list[[i]] &lt;- sum(tmp$file_size[which(is.na(tmp$file_size) == FALSE)])\n}\n\nfolders &lt;- unlist(folder_list)\n\nfolders[which(folders &lt; 100000)] |&gt; sum()\n\n[1] 2061777",
    "crumbs": [
      "2022",
      "Day 7:"
    ]
  },
  {
    "objectID": "2022-07/day7.html#part-2",
    "href": "2022-07/day7.html#part-2",
    "title": "Day 7:",
    "section": "",
    "text": "— Part Two —\nNow, you’re ready to choose a directory to delete.\nThe total disk space available to the filesystem is 70000000. To run the update, you need unused space of at least 30000000. You need to find a directory you can delete that will free up enough space to run the update.\nIn the example above, the total size of the outermost directory (and thus the total amount of used space) is 48381165; this means that the size of the unused space must currently be 21618835, which isn’t quite the 30000000 required by the update. Therefore, the update still requires a directory with total size of at least 8381165 to be deleted before it can run.\nTo achieve this, you have the following options:\nDelete directory e, which would increase unused space by 584. Delete directory a, which would increase unused space by 94853. Delete directory d, which would increase unused space by 24933642. Delete directory /, which would increase unused space by 48381165. Directories e and a are both too small; deleting them would not free up enough space. However, directories d and / are both big enough! Between these, choose the smallest: d, increasing unused space by 24933642.\nFind the smallest directory that, if deleted, would free up enough space on the filesystem to run the update. What is the total size of that directory?\n\ntotal_space &lt;- 70000000\nneeded_space &lt;- 30000000\n\ncurrent_space &lt;- total_space - sum(term_log$file_size, na.rm = TRUE)\n\nmin_space_to_free &lt;- needed_space - current_space\n\nrelevant_folders &lt;- folders[which(folders &gt; min_space_to_free)]\n\nrelevant_folders[which.min(abs(relevant_folders - min_space_to_free))]\n\n[1] 4473403",
    "crumbs": [
      "2022",
      "Day 7:"
    ]
  },
  {
    "objectID": "2021-04/day4.html",
    "href": "2021-04/day4.html",
    "title": "Day 4",
    "section": "",
    "text": "Day 4\n\n#########################\n######### Day 4 #########\n#########################\nrm(list = ls())\nlibrary(stringr)\n\n\ndata &lt;- readLines(\"day4.txt\")\n\n# Part 1\n\ndraw &lt;- data[1]\ndraw &lt;- unlist(strsplit(draw, \",\"))\n\n\nboards &lt;- data[2:length(data)]\nboards &lt;- boards[which(boards != \"\")]\n\nfirst &lt;- seq(1, length(boards)-4, 5)\nlast &lt;- seq(5, length(boards), 5)\n\nboard_list &lt;- list()\nfor(i in 1:length(first)){\n  board_list[[i]] &lt;- boards[first[i]:last[i]]\n}\n\nboard_list &lt;- lapply(board_list, function(x){\n  gsub(\"\\\\s+\", \" \", x) %&gt;% str_trim()\n})\n\nboard_list &lt;- lapply(board_list, function(i){\n  tmp &lt;- strsplit(i, \"\\\\s\",perl = TRUE)\n  tmp &lt;- do.call(rbind, tmp)\n  return(tmp)\n})\n\nnew_holder &lt;- board_list\n\nfor(i in 1:length(draw)){\n  \n  new &lt;- lapply(new_holder, function(x){\n    \n    if(any(x == draw[i])){\n      x[which(x == draw[i])] &lt;- TRUE\n    }\n    \n    return(x)\n  })\n  \n  current_sums &lt;- lapply(new, function(y){\n    \n    row_sum &lt;- apply(y, 1, function(z){\n      sum(z == TRUE)\n    })\n    \n    col_sum &lt;- apply(y, 2, function(z){\n      sum(z == TRUE)\n    })\n    \n    tmp &lt;- cbind(row_sum, col_sum)\n  })\n  \n  winner &lt;- lapply(current_sums, function(k){\n    ifelse(any(k == 5), \"winner\", \"loser\") \n  })\n  \n  if(any(unlist(winner) == \"winner\")){\n    new_holder &lt;- new\n    winner &lt;- which(unlist(winner) == \"winner\")\n    new_holder &lt;- new[[winner]]\n    break\n  }\n  new_holder &lt;- new\n}\n\nrow_winner &lt;- apply(new_holder, 1, function(x){\n  sum(as.logical(x))\n})\n\ncol_winner &lt;- apply(new_holder, 2, function(x){\n  sum(as.logical(x))\n})\n\nunmarked_sum &lt;- sum(as.numeric(ifelse(new_holder == TRUE, \n                                      NA, \n                                      new_holder)), \n                    na.rm = TRUE)\n\nunmarked_sum * as.numeric(draw[i])\n\n[1] 38594\n\n### Part 2 ###\n\nnew_holder &lt;- board_list\nnames(new_holder) &lt;- paste0(\"board\", 1:length(new_holder))\n\nfor(i in 1:length(draw)){\n  # message(paste0(\"Iter \", i, \": \", names(new_holder), collapse = \", \"))\n  \n  new &lt;- lapply(new_holder, function(x){\n    \n    if(any(x == draw[i])){\n      x[which(x == draw[i])] &lt;- TRUE\n    }\n    \n    return(x)\n  })\n  \n  current_sums &lt;- lapply(new, function(y){\n    \n    row_sum &lt;- apply(y, 1, function(z){\n      sum(z == TRUE)\n    })\n    \n    col_sum &lt;- apply(y, 2, function(z){\n      sum(z == TRUE)\n    })\n    \n    tmp &lt;- cbind(row_sum, col_sum)\n  })\n  \n  winner &lt;- lapply(current_sums, function(k){\n    ifelse(any(k == 5), \"winner\", \"loser\") \n  })\n  \n  if(length(new[which(unlist(winner) == \"loser\")]) &lt; 1){\n    new_holder &lt;- new\n    break\n  }\n  \n  new_holder &lt;- new[which(unlist(winner) == \"loser\")]\n\n}\n\nwinner_board &lt;- names(new_holder) %&gt;% str_remove(\"board\") %&gt;% as.numeric()\nnew_holder &lt;- unlist(new_holder)\nunmarked_sum &lt;- sum(as.numeric(ifelse(new_holder == TRUE, NA, new_holder)), na.rm = TRUE)\n\nunmarked_sum * as.numeric(draw[i])\n\n[1] 21184",
    "crumbs": [
      "2021",
      "Day 4"
    ]
  },
  {
    "objectID": "2022-04/day4.html",
    "href": "2022-04/day4.html",
    "title": "Day 4",
    "section": "",
    "text": "Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\nHowever, as some of the Elves compare their section assignments with each other, they’ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\nFor example, consider the following list of section assignment pairs:\n2-4,6-8 2-3,4-5 5-7,7-9 2-8,3-7 6-6,4-6 2-6,4-8\nFor the first few pairs, this list means:\nWithin the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8). The Elves in the second pair were each assigned two sections. The Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9. This example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:\n.234….. 2-4 …..678. 6-8\n.23…… 2-3 …45…. 4-5\n….567.. 5-7 ……789 7-9\n.2345678. 2-8 ..34567.. 3-7\n…..6… 6-6 …456… 4-6\n.23456… 2-6 …45678. 4-8\nSome of the pairs have noticed that one of their assignments fully contains the other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\nIn how many assignment pairs does one range fully contain the other?\n\nlibrary(stringr)\n\ninput &lt;- readLines(\"day4.txt\")\n\nlapply(input, function(x){\n  \n  tmp &lt;- str_split(x, \",\") %&gt;% \n    unlist() %&gt;% \n    str_split(., \"-\")\n\n  tmp2 &lt;- lapply(tmp, function(y) y[1]:y[2])\n  \n\n  \n  \n  if(all(tmp2[[1]] %in% tmp2[[2]]) | all(tmp2[[2]] %in% tmp2[[1]])){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}) |&gt; unlist() |&gt; sum() \n\n[1] 547\n\n\n\n\n\nIt seems like there is still quite a bit of duplicate work planned. Instead, the Elves would like to know the number of pairs that overlap at all.\nIn the above example, the first two pairs (2-4,6-8 and 2-3,4-5) don’t overlap, while the remaining four pairs (5-7,7-9, 2-8,3-7, 6-6,4-6, and 2-6,4-8) do overlap:\n5-7,7-9 overlaps in a single section, 7. 2-8,3-7 overlaps all of the sections 3 through 7. 6-6,4-6 overlaps in a single section, 6. 2-6,4-8 overlaps in sections 4, 5, and 6. So, in this example, the number of overlapping assignment pairs is 4.\nIn how many assignment pairs do the ranges overlap?\n\nlapply(input, function(x){\n  \n  tmp &lt;- str_split(x, \",\") %&gt;% \n    unlist() %&gt;% \n    str_split(., \"-\")\n\n  tmp2 &lt;- lapply(tmp, function(y) y[1]:y[2])\n  \n\n  tmp3 &lt;- (length(intersect(tmp2[[1]], tmp2[[2]])) &gt; 0) == TRUE\n  return(tmp3)\n}) |&gt; unlist() |&gt; sum()\n\n[1] 843",
    "crumbs": [
      "2022",
      "Day 4"
    ]
  },
  {
    "objectID": "2022-04/day4.html#camp-cleanup",
    "href": "2022-04/day4.html#camp-cleanup",
    "title": "Day 4",
    "section": "",
    "text": "Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\nHowever, as some of the Elves compare their section assignments with each other, they’ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\nFor example, consider the following list of section assignment pairs:\n2-4,6-8 2-3,4-5 5-7,7-9 2-8,3-7 6-6,4-6 2-6,4-8\nFor the first few pairs, this list means:\nWithin the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8). The Elves in the second pair were each assigned two sections. The Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9. This example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:\n.234….. 2-4 …..678. 6-8\n.23…… 2-3 …45…. 4-5\n….567.. 5-7 ……789 7-9\n.2345678. 2-8 ..34567.. 3-7\n…..6… 6-6 …456… 4-6\n.23456… 2-6 …45678. 4-8\nSome of the pairs have noticed that one of their assignments fully contains the other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\nIn how many assignment pairs does one range fully contain the other?\n\nlibrary(stringr)\n\ninput &lt;- readLines(\"day4.txt\")\n\nlapply(input, function(x){\n  \n  tmp &lt;- str_split(x, \",\") %&gt;% \n    unlist() %&gt;% \n    str_split(., \"-\")\n\n  tmp2 &lt;- lapply(tmp, function(y) y[1]:y[2])\n  \n\n  \n  \n  if(all(tmp2[[1]] %in% tmp2[[2]]) | all(tmp2[[2]] %in% tmp2[[1]])){\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}) |&gt; unlist() |&gt; sum() \n\n[1] 547",
    "crumbs": [
      "2022",
      "Day 4"
    ]
  },
  {
    "objectID": "2022-04/day4.html#part-2",
    "href": "2022-04/day4.html#part-2",
    "title": "Day 4",
    "section": "",
    "text": "It seems like there is still quite a bit of duplicate work planned. Instead, the Elves would like to know the number of pairs that overlap at all.\nIn the above example, the first two pairs (2-4,6-8 and 2-3,4-5) don’t overlap, while the remaining four pairs (5-7,7-9, 2-8,3-7, 6-6,4-6, and 2-6,4-8) do overlap:\n5-7,7-9 overlaps in a single section, 7. 2-8,3-7 overlaps all of the sections 3 through 7. 6-6,4-6 overlaps in a single section, 6. 2-6,4-8 overlaps in sections 4, 5, and 6. So, in this example, the number of overlapping assignment pairs is 4.\nIn how many assignment pairs do the ranges overlap?\n\nlapply(input, function(x){\n  \n  tmp &lt;- str_split(x, \",\") %&gt;% \n    unlist() %&gt;% \n    str_split(., \"-\")\n\n  tmp2 &lt;- lapply(tmp, function(y) y[1]:y[2])\n  \n\n  tmp3 &lt;- (length(intersect(tmp2[[1]], tmp2[[2]])) &gt; 0) == TRUE\n  return(tmp3)\n}) |&gt; unlist() |&gt; sum()\n\n[1] 843",
    "crumbs": [
      "2022",
      "Day 4"
    ]
  },
  {
    "objectID": "2023-01/2023-01.html",
    "href": "2023-01/2023-01.html",
    "title": "Day 1",
    "section": "",
    "text": "Something is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2 pqr3stu8vwx a1b2c3d4e5f treb7uchet In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\n\n\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\n\n\n\n\ntest_data &lt;- c(\"1abc2\",\n               \"pqr3stu8vwx\",\n               \"a1b2c3d4e5f\",\n               \"treb7uchet\")\n\nlapply(strsplit(test_data, \"\"), \\(x) {\n  \n  tmp &lt;- x[which(grepl(\"[0-9]\", x))]\n  \n  tmp &lt;- tmp[c(1, length(tmp))] |&gt; \n    paste(collapse = \"\") |&gt; \n    as.numeric()\n  \n  return(tmp)\n\n}) |&gt; unlist() |&gt; sum()\n\n[1] 142\n\n\n\n\n\n\ncal_val &lt;- readLines(\"data.txt\")\n\nlapply(strsplit(cal_val, \"\"), \\(x) {\n  \n  tmp &lt;- x[which(grepl(\"[0-9]\", x))]\n  \n  tmp &lt;- tmp[c(1, length(tmp))] |&gt; \n    paste(collapse = \"\") |&gt; \n    as.numeric()\n  \n  return(tmp)\n\n}) |&gt; unlist() |&gt; sum()\n\n[1] 56049",
    "crumbs": [
      "2023",
      "Day 1"
    ]
  },
  {
    "objectID": "2023-01/2023-01.html#puzzle-text",
    "href": "2023-01/2023-01.html#puzzle-text",
    "title": "Day 1",
    "section": "",
    "text": "Something is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2 pqr3stu8vwx a1b2c3d4e5f treb7uchet In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\n\n\nConsider your entire calibration document. What is the sum of all of the calibration values?",
    "crumbs": [
      "2023",
      "Day 1"
    ]
  },
  {
    "objectID": "2023-01/2023-01.html#part-1-with-mock-data",
    "href": "2023-01/2023-01.html#part-1-with-mock-data",
    "title": "Day 1",
    "section": "",
    "text": "test_data &lt;- c(\"1abc2\",\n               \"pqr3stu8vwx\",\n               \"a1b2c3d4e5f\",\n               \"treb7uchet\")\n\nlapply(strsplit(test_data, \"\"), \\(x) {\n  \n  tmp &lt;- x[which(grepl(\"[0-9]\", x))]\n  \n  tmp &lt;- tmp[c(1, length(tmp))] |&gt; \n    paste(collapse = \"\") |&gt; \n    as.numeric()\n  \n  return(tmp)\n\n}) |&gt; unlist() |&gt; sum()\n\n[1] 142",
    "crumbs": [
      "2023",
      "Day 1"
    ]
  },
  {
    "objectID": "2023-01/2023-01.html#part-1-with-input-data",
    "href": "2023-01/2023-01.html#part-1-with-input-data",
    "title": "Day 1",
    "section": "",
    "text": "cal_val &lt;- readLines(\"data.txt\")\n\nlapply(strsplit(cal_val, \"\"), \\(x) {\n  \n  tmp &lt;- x[which(grepl(\"[0-9]\", x))]\n  \n  tmp &lt;- tmp[c(1, length(tmp))] |&gt; \n    paste(collapse = \"\") |&gt; \n    as.numeric()\n  \n  return(tmp)\n\n}) |&gt; unlist() |&gt; sum()\n\n[1] 56049",
    "crumbs": [
      "2023",
      "Day 1"
    ]
  },
  {
    "objectID": "2023-01/2023-01.html#puzzle-text-1",
    "href": "2023-01/2023-01.html#puzzle-text-1",
    "title": "Day 1",
    "section": "Puzzle text",
    "text": "Puzzle text\n\nYour calculation isn’t quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid “digits”.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\n\ntwo1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\n\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\n\n\nPart 2 with mock data\n\ntest_data &lt;- c(\"two1nine\",\n               \"eightwothree\",\n               \"abcone2threexyz\",\n               \"xtwone3four\",\n               \"4nineeightseven2\",\n               \"zoneight234\",\n               \"7pqrstsixteen\")\n\nnum_map &lt;- list(1, 2, 3, 4, 5, 6, 7, 8, 9)\nnames(num_map) &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n\nnum_match &lt;- paste0(\n  paste(c(1:9), collapse = \"|\"),\n  \"|\",\n  paste(names(num_map), collapse = \"|\"),\n  collapse = \"|\")\n\nlapply(test_data, \\(i){\n  \n  tmp &lt;- strsplit(i, \"\") |&gt; unlist()\n  \n  for(j in 1:length(tmp)) {\n    \n    chck &lt;- stringr::str_extract(paste(tmp[1:j], collapse = \"\"), num_match)\n    \n    if(is.na(chck)) next\n    \n    if(grepl(\"[0-9]\", chck)) {\n      first &lt;- chck\n    }\n    \n    if(grepl(paste(names(num_map), collapse = \"|\"), chck)){\n      \n      first &lt;- stringr::str_replace(chck, chck, as.character(num_map[[chck]]))\n      \n    }\n    \n  }\n  \n  for(j in 1:length(tmp)) {\n    \n    chck &lt;- stringr::str_extract(paste(rev(tmp)[j:1], collapse = \"\"), num_match)\n    \n    if(is.na(chck)) next\n    \n    if(grepl(\"[0-9]\", chck)) {\n      last &lt;- chck\n    }\n    \n    if(grepl(paste(names(num_map), collapse = \"|\"), chck)){\n      \n      last &lt;- stringr::str_replace(chck, chck, as.character(num_map[[chck]]))\n      \n    }\n    return(as.numeric(paste0(first, last)))\n  }\n\n  \n  \n}) |&gt; unlist() |&gt; sum()\n\n[1] 281",
    "crumbs": [
      "2023",
      "Day 1"
    ]
  },
  {
    "objectID": "2023-01/2023-01.html#part-2-with-input-data",
    "href": "2023-01/2023-01.html#part-2-with-input-data",
    "title": "Day 1",
    "section": "Part 2 with input data",
    "text": "Part 2 with input data\n\nlapply(cal_val, \\(i){\n  \n  tmp &lt;- strsplit(i, \"\") |&gt; unlist()\n  \n  for(j in 1:length(tmp)) {\n    \n    chck &lt;- stringr::str_extract(paste(tmp[1:j], collapse = \"\"), num_match)\n    \n    if(is.na(chck)) next\n    \n    if(grepl(\"[0-9]\", chck)) {\n      first &lt;- chck\n    }\n    \n    if(grepl(paste(names(num_map), collapse = \"|\"), chck)){\n      \n      first &lt;- stringr::str_replace(chck, chck, as.character(num_map[[chck]]))\n      \n    }\n    \n  }\n  \n  for(j in 1:length(tmp)) {\n    \n    chck &lt;- stringr::str_extract(paste(rev(tmp)[j:1], collapse = \"\"), num_match)\n    \n    if(is.na(chck)) next\n    \n    if(grepl(\"[0-9]\", chck)) {\n      last &lt;- chck\n    }\n    \n    if(grepl(paste(names(num_map), collapse = \"|\"), chck)){\n      \n      last &lt;- stringr::str_replace(chck, chck, as.character(num_map[[chck]]))\n      \n    }\n    return(as.numeric(paste0(first, last)))\n  }\n\n  \n  \n}) |&gt; unlist() |&gt; sum()\n\n[1] 54530",
    "crumbs": [
      "2023",
      "Day 1"
    ]
  },
  {
    "objectID": "2024-02/day2.html",
    "href": "2024-02/day2.html",
    "title": "Day 2",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1 1 2 7 8 9 9 7 6 2 1 1 3 2 4 5 8 6 4 4 1 1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2. 1 2 7 8 9: Unsafe because 2 7 is an increase of 5. 9 7 6 2 1: Unsafe because 6 2 is a decrease of 4. 1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing. 8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease. 1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\nTo begin, get your puzzle input.\n\ninp &lt;- readLines(\"input.txt\")\n# x = inp[6]\n\nlapply(inp, \\(x) {\n  \n  tmp &lt;- as.numeric(unlist(strsplit(x, \"\\\\s+\")))\n  \n  tmp &lt;- data.frame(x = c(NA, tmp), y = c(tmp, NA))\n  \n  tmp$diff &lt;-  tmp$y - tmp$x\n  \n  tmp &lt;- subset(tmp, is.na(diff) == FALSE)\n  \n  if((all(tmp$diff &gt; 0) | all(tmp$diff &lt; 0)) & all(abs(tmp$diff) &lt; 4)) {\n    return(\"safe\")\n  } else {\n    return(\"unsafe\")\n  }\n  \n}) |&gt; unlist() |&gt; table()\n\n\n  safe unsafe \n   236    764 \n\n\n— Part Two —\nThe engineers are surprised by the low number of safe reports until they realize they forgot to tell you about the Problem Dampener.\nThe Problem Dampener is a reactor-mounted module that lets the reactor safety systems tolerate a single bad level in what would otherwise be a safe report. It’s like the bad level never happened!\nNow, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.\nMore of the above example’s reports are now safe:\n7 6 4 2 1: Safe without removing any level. 1 2 7 8 9: Unsafe regardless of which level is removed. 9 7 6 2 1: Unsafe regardless of which level is removed. 1 3 2 4 5: Safe by removing the second level, 3. 8 6 4 4 1: Safe by removing the third level, 4. 1 3 6 7 9: Safe without removing any level.\nThanks to the Problem Dampener, 4 reports are actually safe!\nUpdate your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?\n\nlapply(inp, \\(x) {\n  \n  orig &lt;- as.numeric(unlist(strsplit(x, \"\\\\s+\")))\n  \n  tmp &lt;- data.frame(x = orig) |&gt; \n    dplyr::mutate(y = dplyr::lag(x))\n  \n  tmp$diff &lt;-  tmp$x - tmp$y \n  \n  tmp &lt;- subset(tmp, is.na(diff) == FALSE)\n  \n  if((all(tmp$diff &gt; 0) | all(tmp$diff &lt; 0)) & all(abs(tmp$diff) &lt; 4)) {\n    return(\"safe\")\n  }\n  \n  for(i in 1:length(orig)) {\n    \n    orig_reduced &lt;- orig[-i]\n    \n    tmp &lt;- data.frame(x = orig_reduced) |&gt; \n      dplyr::mutate(y = dplyr::lag(x))\n    \n    tmp$diff &lt;-  tmp$x - tmp$y \n    \n    tmp &lt;- subset(tmp, is.na(diff) == FALSE)\n    \n    if((all(tmp$diff &gt; 0) | all(tmp$diff &lt; 0)) & all(abs(tmp$diff) &lt; 4)) {\n      return(\"safe\")\n    }\n    \n    \n  }\n  \n  return(\"unsafe\")\n  \n}) |&gt; unlist() |&gt; table()\n\n\n  safe unsafe \n   308    692",
    "crumbs": [
      "2024",
      "Day 2"
    ]
  },
  {
    "objectID": "2024-02/day2.html#red-nosed-reports",
    "href": "2024-02/day2.html#red-nosed-reports",
    "title": "Day 2",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1 1 2 7 8 9 9 7 6 2 1 1 3 2 4 5 8 6 4 4 1 1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2. 1 2 7 8 9: Unsafe because 2 7 is an increase of 5. 9 7 6 2 1: Unsafe because 6 2 is a decrease of 4. 1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing. 8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease. 1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\nTo begin, get your puzzle input.\n\ninp &lt;- readLines(\"input.txt\")\n# x = inp[6]\n\nlapply(inp, \\(x) {\n  \n  tmp &lt;- as.numeric(unlist(strsplit(x, \"\\\\s+\")))\n  \n  tmp &lt;- data.frame(x = c(NA, tmp), y = c(tmp, NA))\n  \n  tmp$diff &lt;-  tmp$y - tmp$x\n  \n  tmp &lt;- subset(tmp, is.na(diff) == FALSE)\n  \n  if((all(tmp$diff &gt; 0) | all(tmp$diff &lt; 0)) & all(abs(tmp$diff) &lt; 4)) {\n    return(\"safe\")\n  } else {\n    return(\"unsafe\")\n  }\n  \n}) |&gt; unlist() |&gt; table()\n\n\n  safe unsafe \n   236    764 \n\n\n— Part Two —\nThe engineers are surprised by the low number of safe reports until they realize they forgot to tell you about the Problem Dampener.\nThe Problem Dampener is a reactor-mounted module that lets the reactor safety systems tolerate a single bad level in what would otherwise be a safe report. It’s like the bad level never happened!\nNow, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.\nMore of the above example’s reports are now safe:\n7 6 4 2 1: Safe without removing any level. 1 2 7 8 9: Unsafe regardless of which level is removed. 9 7 6 2 1: Unsafe regardless of which level is removed. 1 3 2 4 5: Safe by removing the second level, 3. 8 6 4 4 1: Safe by removing the third level, 4. 1 3 6 7 9: Safe without removing any level.\nThanks to the Problem Dampener, 4 reports are actually safe!\nUpdate your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?\n\nlapply(inp, \\(x) {\n  \n  orig &lt;- as.numeric(unlist(strsplit(x, \"\\\\s+\")))\n  \n  tmp &lt;- data.frame(x = orig) |&gt; \n    dplyr::mutate(y = dplyr::lag(x))\n  \n  tmp$diff &lt;-  tmp$x - tmp$y \n  \n  tmp &lt;- subset(tmp, is.na(diff) == FALSE)\n  \n  if((all(tmp$diff &gt; 0) | all(tmp$diff &lt; 0)) & all(abs(tmp$diff) &lt; 4)) {\n    return(\"safe\")\n  }\n  \n  for(i in 1:length(orig)) {\n    \n    orig_reduced &lt;- orig[-i]\n    \n    tmp &lt;- data.frame(x = orig_reduced) |&gt; \n      dplyr::mutate(y = dplyr::lag(x))\n    \n    tmp$diff &lt;-  tmp$x - tmp$y \n    \n    tmp &lt;- subset(tmp, is.na(diff) == FALSE)\n    \n    if((all(tmp$diff &gt; 0) | all(tmp$diff &lt; 0)) & all(abs(tmp$diff) &lt; 4)) {\n      return(\"safe\")\n    }\n    \n    \n  }\n  \n  return(\"unsafe\")\n  \n}) |&gt; unlist() |&gt; table()\n\n\n  safe unsafe \n   308    692",
    "crumbs": [
      "2024",
      "Day 2"
    ]
  },
  {
    "objectID": "2022-05/day5.html",
    "href": "2022-05/day5.html",
    "title": "Day 5:",
    "section": "",
    "text": "The expedition can depart as soon as the final supplies have been unloaded from the ships. Supplies are stored in stacks of marked crates, but because the needed supplies are buried under many other crates, the crates need to be rearranged.\nThe ship has a giant cargo crane capable of moving crates between stacks. To ensure none of the crates get crushed or fall over, the crane operator will rearrange them in a series of carefully-planned steps. After the crates are rearranged, the desired crates will be at the top of each stack.\nThe Elves don’t want to interrupt the crane operator during this delicate procedure, but they forgot to ask her which crate will end up where, and they want to be ready to unload them as soon as possible so they can embark.\nThey do, however, have a drawing of the starting stacks of crates and the rearrangement procedure (your puzzle input). For example:\n[D]    \n[N] [C]\n[Z] [M] [P] 1 2 3\nmove 1 from 2 to 1 move 3 from 1 to 3 move 2 from 2 to 1 move 1 from 1 to 2 In this example, there are three stacks of crates. Stack 1 contains two crates: crate Z is on the bottom, and crate N is on top. Stack 2 contains three crates; from bottom to top, they are crates M, C, and D. Finally, stack 3 contains a single crate, P.\nThen, the rearrangement procedure is given. In each step of the procedure, a quantity of crates is moved from one stack to a different stack. In the first step of the above rearrangement procedure, one crate is moved from stack 2 to stack 1, resulting in this configuration:\n[D]\n[N] [C]\n[Z] [M] [P] 1 2 3 In the second step, three crates are moved from stack 1 to stack 3. Crates are moved one at a time, so the first crate to be moved (D) ends up below the second and third crates:\n    [Z]\n    [N]\n[C] [D]\n[M] [P]\n1 2 3 Then, both crates are moved from stack 2 to stack 1. Again, because crates are moved one at a time, crate C ends up below crate M:\n    [Z]\n    [N]\n[M] [D] [C] [P] 1 2 3 Finally, one crate is moved from stack 1 to stack 2:\n    [Z]\n    [N]\n    [D]\n[C] [M] [P] 1 2 3 The Elves just need to know which crate will end up on top of each stack; in this example, the top crates are C in stack 1, M in stack 2, and Z in stack 3, so you should combine these together and give the Elves the message CMZ.\nAfter the rearrangement procedure completes, what crate ends up on top of each stack?\n\n# Restructuring data (there must be a better way)\nlibrary(stringr)\n\ninput &lt;- readLines(\"day5.txt\")\n\nstacks &lt;- input[1:8]\ninstructions &lt;- input[11:length(input)]\n\nstart &lt;- c(seq(1, 29, 4), 33)\nend &lt;- c(seq(4, 32, 4), 35)\n\nstacks &lt;- lapply(stacks, function(x){\n  \n  tmp &lt;- str_split(x, \"\")\n  \n  hm &lt;- character()\n  \n  for(i in 1:length(start)){\n    hm[i] &lt;- tmp[[1]][start[i]:end[i]] |&gt;\n      str_c(collapse = \"\") |&gt;\n      str_trim()\n  }\n  return(hm)\n})\n\nstacks &lt;- do.call(rbind, stacks)\nstacks &lt;- apply(stacks, 2, function(x) list(rev(x))) |&gt; unlist(recursive = FALSE)\nstacks &lt;- lapply(stacks, function(x){\n  \n  if(any(x == \"\")){\n    return(x[1:which(x == \"\")[1]-1])\n  } else {\n    return(x)\n  }\n})\n\n\n# Rearranging stacks\nstacks_p1 &lt;- stacks\n\nfor(x in instructions){\n  #message(x)\n  moving_num &lt;- str_extract_all(x, \"\\\\d+\") |&gt;\n    unlist() |&gt;\n    as.numeric()\n\n  move_from &lt;- stacks_p1[[moving_num[2]]]\n  move_this &lt;- move_from[(length(move_from) + 1 - moving_num[1]):length(move_from)]\n  \n  stacks_p1[[moving_num[3]]] &lt;- c(stacks_p1[[moving_num[3]]], rev(move_this))\n  \n  \n  if(length(stacks_p1[[moving_num[2]]]) == moving_num[1]){\n    stacks_p1[[moving_num[2]]] &lt;- character()\n  } else{\n    \n    stacks_p1[[moving_num[2]]] &lt;- stacks_p1[[moving_num[2]]][1:(length(move_from) - moving_num[1])]\n  }\n\n}\n\nsapply(stacks_p1, function(x) x[length(x)]) |&gt;\n  str_remove_all(\"\\\\[|\\\\]\") |&gt;\n  str_c(collapse = \"\")\n\n[1] \"SVFDLGLWV\"\n\n\n\n\n\n— Part Two — As you watch the crane operator expertly rearrange the crates, you notice the process isn’t following your prediction.\nSome mud was covering the writing on the side of the crane, and you quickly wipe it away. The crane isn’t a CrateMover 9000 - it’s a CrateMover 9001.\nThe CrateMover 9001 is notable for many new and exciting features: air conditioning, leather seats, an extra cup holder, and the ability to pick up and move multiple crates at once.\nAgain considering the example above, the crates begin in the same configuration:\n[D]    \n[N] [C]\n[Z] [M] [P] 1 2 3 Moving a single crate from stack 2 to stack 1 behaves the same as before:\n[D]\n[N] [C]\n[Z] [M] [P] 1 2 3 However, the action of moving three crates from stack 1 to stack 3 means that those three moved crates stay in the same order, resulting in this new configuration:\n    [D]\n    [N]\n[C] [Z]\n[M] [P]\n1 2 3 Next, as both crates are moved from stack 2 to stack 1, they retain their order as well:\n    [D]\n    [N]\n[C] [Z] [M] [P] 1 2 3 Finally, a single crate is still moved from stack 1 to stack 2, but now it’s crate C that gets moved:\n    [D]\n    [N]\n    [Z]\n[M] [C] [P] 1 2 3 In this example, the CrateMover 9001 has put the crates in a totally different order: MCD.\nBefore the rearrangement process finishes, update your simulation so that the Elves know where they should stand to be ready to unload the final supplies. After the rearrangement procedure completes, what crate ends up on top of each stack?\n\n# Rearranging stacks p2\nstacks_p2 &lt;- stacks\n\nfor(x in instructions){\n  # message(x)\n  \n  moving_num &lt;- str_extract_all(x, \"\\\\d+\") |&gt;\n    unlist() |&gt;\n    as.numeric()\n\n  move_from &lt;- stacks_p2[[moving_num[2]]]\n  move_this &lt;- move_from[(length(move_from) + 1 - moving_num[1]):length(move_from)]\n  \n  stacks_p2[[moving_num[3]]] &lt;- c(stacks_p2[[moving_num[3]]], move_this)\n  \n  \n  if(length(stacks_p2[[moving_num[2]]]) == moving_num[1]){\n    stacks_p2[[moving_num[2]]] &lt;- character()\n  } else{\n    \n    stacks_p2[[moving_num[2]]] &lt;- stacks_p2[[moving_num[2]]][1:(length(move_from) - moving_num[1])]\n  }\n\n}\n\nsapply(stacks_p2, function(x) x[length(x)]) |&gt;\n  str_remove_all(\"\\\\[|\\\\]\") |&gt;\n  str_c(collapse = \"\")\n\n[1] \"DCVTCVPCL\"",
    "crumbs": [
      "2022",
      "Day 5:"
    ]
  },
  {
    "objectID": "2022-05/day5.html#supply-stacks",
    "href": "2022-05/day5.html#supply-stacks",
    "title": "Day 5:",
    "section": "",
    "text": "The expedition can depart as soon as the final supplies have been unloaded from the ships. Supplies are stored in stacks of marked crates, but because the needed supplies are buried under many other crates, the crates need to be rearranged.\nThe ship has a giant cargo crane capable of moving crates between stacks. To ensure none of the crates get crushed or fall over, the crane operator will rearrange them in a series of carefully-planned steps. After the crates are rearranged, the desired crates will be at the top of each stack.\nThe Elves don’t want to interrupt the crane operator during this delicate procedure, but they forgot to ask her which crate will end up where, and they want to be ready to unload them as soon as possible so they can embark.\nThey do, however, have a drawing of the starting stacks of crates and the rearrangement procedure (your puzzle input). For example:\n[D]    \n[N] [C]\n[Z] [M] [P] 1 2 3\nmove 1 from 2 to 1 move 3 from 1 to 3 move 2 from 2 to 1 move 1 from 1 to 2 In this example, there are three stacks of crates. Stack 1 contains two crates: crate Z is on the bottom, and crate N is on top. Stack 2 contains three crates; from bottom to top, they are crates M, C, and D. Finally, stack 3 contains a single crate, P.\nThen, the rearrangement procedure is given. In each step of the procedure, a quantity of crates is moved from one stack to a different stack. In the first step of the above rearrangement procedure, one crate is moved from stack 2 to stack 1, resulting in this configuration:\n[D]\n[N] [C]\n[Z] [M] [P] 1 2 3 In the second step, three crates are moved from stack 1 to stack 3. Crates are moved one at a time, so the first crate to be moved (D) ends up below the second and third crates:\n    [Z]\n    [N]\n[C] [D]\n[M] [P]\n1 2 3 Then, both crates are moved from stack 2 to stack 1. Again, because crates are moved one at a time, crate C ends up below crate M:\n    [Z]\n    [N]\n[M] [D] [C] [P] 1 2 3 Finally, one crate is moved from stack 1 to stack 2:\n    [Z]\n    [N]\n    [D]\n[C] [M] [P] 1 2 3 The Elves just need to know which crate will end up on top of each stack; in this example, the top crates are C in stack 1, M in stack 2, and Z in stack 3, so you should combine these together and give the Elves the message CMZ.\nAfter the rearrangement procedure completes, what crate ends up on top of each stack?\n\n# Restructuring data (there must be a better way)\nlibrary(stringr)\n\ninput &lt;- readLines(\"day5.txt\")\n\nstacks &lt;- input[1:8]\ninstructions &lt;- input[11:length(input)]\n\nstart &lt;- c(seq(1, 29, 4), 33)\nend &lt;- c(seq(4, 32, 4), 35)\n\nstacks &lt;- lapply(stacks, function(x){\n  \n  tmp &lt;- str_split(x, \"\")\n  \n  hm &lt;- character()\n  \n  for(i in 1:length(start)){\n    hm[i] &lt;- tmp[[1]][start[i]:end[i]] |&gt;\n      str_c(collapse = \"\") |&gt;\n      str_trim()\n  }\n  return(hm)\n})\n\nstacks &lt;- do.call(rbind, stacks)\nstacks &lt;- apply(stacks, 2, function(x) list(rev(x))) |&gt; unlist(recursive = FALSE)\nstacks &lt;- lapply(stacks, function(x){\n  \n  if(any(x == \"\")){\n    return(x[1:which(x == \"\")[1]-1])\n  } else {\n    return(x)\n  }\n})\n\n\n# Rearranging stacks\nstacks_p1 &lt;- stacks\n\nfor(x in instructions){\n  #message(x)\n  moving_num &lt;- str_extract_all(x, \"\\\\d+\") |&gt;\n    unlist() |&gt;\n    as.numeric()\n\n  move_from &lt;- stacks_p1[[moving_num[2]]]\n  move_this &lt;- move_from[(length(move_from) + 1 - moving_num[1]):length(move_from)]\n  \n  stacks_p1[[moving_num[3]]] &lt;- c(stacks_p1[[moving_num[3]]], rev(move_this))\n  \n  \n  if(length(stacks_p1[[moving_num[2]]]) == moving_num[1]){\n    stacks_p1[[moving_num[2]]] &lt;- character()\n  } else{\n    \n    stacks_p1[[moving_num[2]]] &lt;- stacks_p1[[moving_num[2]]][1:(length(move_from) - moving_num[1])]\n  }\n\n}\n\nsapply(stacks_p1, function(x) x[length(x)]) |&gt;\n  str_remove_all(\"\\\\[|\\\\]\") |&gt;\n  str_c(collapse = \"\")\n\n[1] \"SVFDLGLWV\"",
    "crumbs": [
      "2022",
      "Day 5:"
    ]
  },
  {
    "objectID": "2022-05/day5.html#part-2",
    "href": "2022-05/day5.html#part-2",
    "title": "Day 5:",
    "section": "",
    "text": "— Part Two — As you watch the crane operator expertly rearrange the crates, you notice the process isn’t following your prediction.\nSome mud was covering the writing on the side of the crane, and you quickly wipe it away. The crane isn’t a CrateMover 9000 - it’s a CrateMover 9001.\nThe CrateMover 9001 is notable for many new and exciting features: air conditioning, leather seats, an extra cup holder, and the ability to pick up and move multiple crates at once.\nAgain considering the example above, the crates begin in the same configuration:\n[D]    \n[N] [C]\n[Z] [M] [P] 1 2 3 Moving a single crate from stack 2 to stack 1 behaves the same as before:\n[D]\n[N] [C]\n[Z] [M] [P] 1 2 3 However, the action of moving three crates from stack 1 to stack 3 means that those three moved crates stay in the same order, resulting in this new configuration:\n    [D]\n    [N]\n[C] [Z]\n[M] [P]\n1 2 3 Next, as both crates are moved from stack 2 to stack 1, they retain their order as well:\n    [D]\n    [N]\n[C] [Z] [M] [P] 1 2 3 Finally, a single crate is still moved from stack 1 to stack 2, but now it’s crate C that gets moved:\n    [D]\n    [N]\n    [Z]\n[M] [C] [P] 1 2 3 In this example, the CrateMover 9001 has put the crates in a totally different order: MCD.\nBefore the rearrangement process finishes, update your simulation so that the Elves know where they should stand to be ready to unload the final supplies. After the rearrangement procedure completes, what crate ends up on top of each stack?\n\n# Rearranging stacks p2\nstacks_p2 &lt;- stacks\n\nfor(x in instructions){\n  # message(x)\n  \n  moving_num &lt;- str_extract_all(x, \"\\\\d+\") |&gt;\n    unlist() |&gt;\n    as.numeric()\n\n  move_from &lt;- stacks_p2[[moving_num[2]]]\n  move_this &lt;- move_from[(length(move_from) + 1 - moving_num[1]):length(move_from)]\n  \n  stacks_p2[[moving_num[3]]] &lt;- c(stacks_p2[[moving_num[3]]], move_this)\n  \n  \n  if(length(stacks_p2[[moving_num[2]]]) == moving_num[1]){\n    stacks_p2[[moving_num[2]]] &lt;- character()\n  } else{\n    \n    stacks_p2[[moving_num[2]]] &lt;- stacks_p2[[moving_num[2]]][1:(length(move_from) - moving_num[1])]\n  }\n\n}\n\nsapply(stacks_p2, function(x) x[length(x)]) |&gt;\n  str_remove_all(\"\\\\[|\\\\]\") |&gt;\n  str_c(collapse = \"\")\n\n[1] \"DCVTCVPCL\"",
    "crumbs": [
      "2022",
      "Day 5:"
    ]
  },
  {
    "objectID": "2021-03/day3.html",
    "href": "2021-03/day3.html",
    "title": "Day 3",
    "section": "",
    "text": "Day 3\n\n#########################\n######### Day 3 #########\n#########################\n\n\nrm(list = ls())\n\nlibrary(GA) # convert binary to decimal with binary2decimal()\n\nLoading required package: foreach\n\n\nLoading required package: iterators\n\n\nPackage 'GA' version 3.2.4\nType 'citation(\"GA\")' for citing this R package in publications.\n\n\n\nAttaching package: 'GA'\n\n\nThe following object is masked from 'package:utils':\n\n    de\n\ndata &lt;- readLines(\"day3.txt\")\n\n\n### Part 1 ###\n\n# Splitting the binaries into vectors\nsplit &lt;- lapply(1:length(data), function(x){\n  \n  unlist(strsplit(data[x], \"(?&lt;=[0-1])\", perl = TRUE))\n  \n})\n\n# Making holder for collecting binaries\ncollect &lt;- list()\n\n# Looping over all 12 binaries\nfor(i in 1:12){\n  \n  # extracting binaries in i'th position to a vector\n  collect[[i]] &lt;- as.character(sapply(split, \"[[\", i))\n}\n\n# making binary result list\nbinary_result &lt;- lapply(collect, function(x){\n  # counting ones and zeroes in each collect[[x]] \n  n_0 &lt;- length(which(x == \"0\"))\n  n_1 &lt;- length(which(x == \"1\"))\n  \n  # if there are more zeroes than ones, return 0, else 1\n  binary &lt;- ifelse(n_0 &gt; n_1, 0, 1)\n  return(binary)\n})\n\n# Unlisting for gamma binary\nbinary_result &lt;- unlist(binary_result)\n\n# Reversing result for epsilon binary\nbinary_result_reversed &lt;- (binary_result * -1) +1\n\n# Converting gamma and epsilon to decimal\ngamma &lt;- binary2decimal(binary_result)\nepsilon &lt;- binary2decimal(binary_result_reversed)\n\n# Solution is gamma multiplied by epsilon\ngamma * epsilon\n\n[1] 4174964\n\n### Part 2 ###\n\n# Making a list of data frames for each binary \n# (more comfortable to work with)\no2_co2_base &lt;- lapply(1:length(collect), function(x){\n  data.frame(collect[[x]])\n})\n\n# Binding to one data frame\no2_co2_base &lt;- do.call(cbind, o2_co2_base)\n\n# Making copy of data frame for o2 values\no2 &lt;- o2_co2_base\n\n# looping over all binaries\nfor(x in 1:12){\n  \n  # if there is only one row left, break the loop\n  if(nrow(o2) == 1) break\n  \n  # if there are more ones (or equal) than zeroes in the x'th column\n  # only keep rows starting with 1 in the x'th column\n  if(sum(o2[, x] == \"1\") &gt;= sum(o2[, x] == \"0\")){\n    \n    o2 &lt;- o2[which(o2[, x] == \"1\"), ]\n    \n  } else { # else only keep rows starting with zero\n    \n    o2 &lt;- o2[which(o2[, x] == \"0\"), ]\n    \n  }\n  \n}\n\n# Making copy of data frame for o2 values\nco2 &lt;- o2_co2_base\n\n# looping over all binaries\nfor(x in 1:12){\n  \n  # if there is only one row left, break the loop\n  if(nrow(co2) == 1) break\n  \n  # if there are less ones than zeroes in the x'th column\n  # only keep rows starting with 1 in the x'th column\n  if(sum(co2[, x] == \"1\") &lt; sum(co2[, x] == \"0\")){\n    \n    co2 &lt;- co2[which(co2[, x] == \"1\"), ]\n    \n  } else { # else only keep rows starting with zero\n    \n    co2 &lt;- co2[which(co2[, x] == \"0\"), ]\n    \n  }\n  \n}\n\n# Solution is o2 multiplied with co2 in decimal\nbinary2decimal(as.numeric(o2)) * binary2decimal(as.numeric(co2))\n\n[1] 4474944",
    "crumbs": [
      "2021",
      "Day 3"
    ]
  },
  {
    "objectID": "2021-07/day7.html",
    "href": "2021-07/day7.html",
    "title": "Day 7",
    "section": "",
    "text": "Day 7\n\n#########################\n######### Day 7 #########\n#########################\n\n\n\ndata &lt;- scan(\"day7.txt\", sep = \",\")\n# data &lt;- c(16,1,2,0,4,2,7,1,2,14)\n# Part 1\n\nholder &lt;- numeric(range(data)[2])\nnames(holder) &lt;- paste0(\"hpos_\", 1:range(data)[2])\nfor(i in 1:range(data)[2]){\n  \n  holder[i] &lt;- sum(abs(data - i))\n  \n}\n\n# Solution\nholder[which.min(holder)]\n\nhpos_342 \n  351901 \n\nplot(holder, 1:length(holder))\n\n\n\n\n\n\n\n# Part 2\nholder &lt;- numeric(range(data)[2]+1)\nnames(holder) &lt;- paste0(\"hpos_\", 0:range(data)[2])\n\ntest &lt;- lapply(data, function(x){\n  \n  tmp &lt;- numeric(length(holder))\n  \n  for(i in 1:length(holder)){\n    tmp[i] &lt;- sum(0:abs(x - i))\n  }\n  \n  return(tmp)\n  \n})\n\n\ntmp &lt;- numeric(length(test))\n\nfor(i in 1:length(test)){\n  \n  tmp[i] &lt;- sum(sapply(test, \"[[\", i))\n\n}\n\nmin(tmp)\n\n[1] 101079875\n\nlibrary(ggplot2)\n\nggplot(NULL, aes(y = tmp, x = 1:length(tmp), group = 1)) +\n  geom_path() +\n  geom_segment(aes(x = min(tmp), xend = min(tmp), \n                   y = 0, yend = which.min(tmp)), \n               color = \"darkcyan\") +\n  geom_segment(aes(x = min(tmp), xend = max(tmp), y = which.min(tmp), \n                   yend = which.min(tmp)),\n               color = \"darkcyan\") +\n  scale_x_continuous(limits = c(min(tmp) - 5000000, max(tmp))) +\n  theme_classic()\n\nWarning: Removed 1000 rows containing missing values or values outside the scale range\n(`geom_path()`).",
    "crumbs": [
      "2021",
      "Day 7"
    ]
  },
  {
    "objectID": "2022-03/day3.html",
    "href": "2022-03/day3.html",
    "title": "Day 3",
    "section": "",
    "text": "One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn’t quite follow the packing instructions, and so a few items now need to be rearranged.\nEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\nThe Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).\nThe list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\nFor example, suppose you have the following list of contents from six rucksacks:\nvJrwpWtwJgWrhcsFMMfFFhFp jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL PmmdzqPrVvPwwTWBwg wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn ttgJtRGJQctTZtZT CrZsJsPPZsGzwwsLwLmpwMDw\nThe first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p. The second rucksack’s compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L. The third rucksack’s compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P. The fourth rucksack’s compartments only share item type v. The fifth rucksack’s compartments only share item type t. The sixth rucksack’s compartments only share item type s. To help prioritize item rearrangement, every item type can be converted to a priority:\nLowercase item types a through z have priorities 1 through 26. Uppercase item types A through Z have priorities 27 through 52. In the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157.\nFind the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?\n\nlibrary(dplyr)\n\ninput &lt;- readLines(\"day3.txt\")\n\nscores &lt;- data.frame(letters = c(letters, LETTERS),\n                     score = 1:52)\n\nitem_in_both &lt;- lapply(input, function(x){\n  \n  tmp &lt;- c(substr(x, 1, nchar(x)/2), substr(x, nchar(x)/2+1, nchar(x)))\n  tmp &lt;- strsplit(tmp, \"\")\n  \n  return(intersect(tmp[[1]], tmp[[2]]))\n  \n})\n\nitem_in_both %&gt;% \n  unlist() %&gt;% \n  tibble(item_in_both = .) %&gt;% \n  left_join(., scores, by = c(\"item_in_both\" = \"letters\")) %&gt;% \n  pull(score) %&gt;% \n  sum()\n\n[1] 8233\n\n\n\n\n\n— Part Two — As you finish identifying the misplaced items, the Elves come to you with another issue.\nFor safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the only item type carried by all three Elves. That is, if a group’s badge is item type B, then all three Elves will have item type B somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.\nThe problem is that someone forgot to put this year’s updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.\nAdditionally, nobody wrote down which item type corresponds to each group’s badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.\nEvery set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group’s rucksacks are the first three lines:\nvJrwpWtwJgWrhcsFMMfFFhFp jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL PmmdzqPrVvPwwTWBwg\nAnd the second group’s rucksacks are the next three lines:\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn ttgJtRGJQctTZtZT CrZsJsPPZsGzwwsLwLmpwMDw\nIn the first group, the only item type that appears in all three rucksacks is lowercase r; this must be their badges. In the second group, their badge item type must be Z.\nPriorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (r) for the first group and 52 (Z) for the second group. The sum of these is 70.\nFind the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?\n\nbadge &lt;- lapply(seq(1, length(input)-2, 3), function(x){\n  \n  tmp &lt;- input[x:(x+2)]\n  \n  tmp &lt;- strsplit(tmp, \"\")\n  \n  badge &lt;- Reduce(intersect, list(tmp[[1]], \n                                  tmp[[2]], \n                                  tmp[[3]]))\n  return(badge)\n})\n\nunlist(badge) %&gt;% \n  tibble(badge = .) %&gt;% \n  left_join(., scores, by = c(\"badge\" = \"letters\")) %&gt;% \n  pull(score) %&gt;% \n  sum()\n\n[1] 2821",
    "crumbs": [
      "2022",
      "Day 3"
    ]
  },
  {
    "objectID": "2022-03/day3.html#rucksack-reorganization",
    "href": "2022-03/day3.html#rucksack-reorganization",
    "title": "Day 3",
    "section": "",
    "text": "One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn’t quite follow the packing instructions, and so a few items now need to be rearranged.\nEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\nThe Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).\nThe list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\nFor example, suppose you have the following list of contents from six rucksacks:\nvJrwpWtwJgWrhcsFMMfFFhFp jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL PmmdzqPrVvPwwTWBwg wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn ttgJtRGJQctTZtZT CrZsJsPPZsGzwwsLwLmpwMDw\nThe first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p. The second rucksack’s compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L. The third rucksack’s compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P. The fourth rucksack’s compartments only share item type v. The fifth rucksack’s compartments only share item type t. The sixth rucksack’s compartments only share item type s. To help prioritize item rearrangement, every item type can be converted to a priority:\nLowercase item types a through z have priorities 1 through 26. Uppercase item types A through Z have priorities 27 through 52. In the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157.\nFind the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?\n\nlibrary(dplyr)\n\ninput &lt;- readLines(\"day3.txt\")\n\nscores &lt;- data.frame(letters = c(letters, LETTERS),\n                     score = 1:52)\n\nitem_in_both &lt;- lapply(input, function(x){\n  \n  tmp &lt;- c(substr(x, 1, nchar(x)/2), substr(x, nchar(x)/2+1, nchar(x)))\n  tmp &lt;- strsplit(tmp, \"\")\n  \n  return(intersect(tmp[[1]], tmp[[2]]))\n  \n})\n\nitem_in_both %&gt;% \n  unlist() %&gt;% \n  tibble(item_in_both = .) %&gt;% \n  left_join(., scores, by = c(\"item_in_both\" = \"letters\")) %&gt;% \n  pull(score) %&gt;% \n  sum()\n\n[1] 8233",
    "crumbs": [
      "2022",
      "Day 3"
    ]
  },
  {
    "objectID": "2022-03/day3.html#part-2",
    "href": "2022-03/day3.html#part-2",
    "title": "Day 3",
    "section": "",
    "text": "— Part Two — As you finish identifying the misplaced items, the Elves come to you with another issue.\nFor safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the only item type carried by all three Elves. That is, if a group’s badge is item type B, then all three Elves will have item type B somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.\nThe problem is that someone forgot to put this year’s updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.\nAdditionally, nobody wrote down which item type corresponds to each group’s badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.\nEvery set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group’s rucksacks are the first three lines:\nvJrwpWtwJgWrhcsFMMfFFhFp jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL PmmdzqPrVvPwwTWBwg\nAnd the second group’s rucksacks are the next three lines:\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn ttgJtRGJQctTZtZT CrZsJsPPZsGzwwsLwLmpwMDw\nIn the first group, the only item type that appears in all three rucksacks is lowercase r; this must be their badges. In the second group, their badge item type must be Z.\nPriorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (r) for the first group and 52 (Z) for the second group. The sum of these is 70.\nFind the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?\n\nbadge &lt;- lapply(seq(1, length(input)-2, 3), function(x){\n  \n  tmp &lt;- input[x:(x+2)]\n  \n  tmp &lt;- strsplit(tmp, \"\")\n  \n  badge &lt;- Reduce(intersect, list(tmp[[1]], \n                                  tmp[[2]], \n                                  tmp[[3]]))\n  return(badge)\n})\n\nunlist(badge) %&gt;% \n  tibble(badge = .) %&gt;% \n  left_join(., scores, by = c(\"badge\" = \"letters\")) %&gt;% \n  pull(score) %&gt;% \n  sum()\n\n[1] 2821",
    "crumbs": [
      "2022",
      "Day 3"
    ]
  },
  {
    "objectID": "2021-01/day1.html",
    "href": "2021-01/day1.html",
    "title": "Day 1",
    "section": "",
    "text": "Day 1\n\n#########################\n######### Day 1 #########\n#########################\n\n\n# Read data\ndata &lt;- readLines(\"day1.txt\")\n\n\n### Part 1 ###\n\n# Converting to numeric\ndata &lt;- as.numeric(data)\n\n# Making holder variable for whether step is deeper\ndeeper &lt;- logical(2000)\n\nfor(i in 2:length(data)){ # looping over all but first data points\n  # if i is bigger than i-1 return TRUE, all else return FALSE\n  deeper[i] &lt;- ifelse(data[i] &gt; data[i-1], TRUE, FALSE)\n}\n\n# TRUE count is solution\ntable(deeper)\n\ndeeper\nFALSE  TRUE \n  607  1393 \n\n### Part 2 ###\n\n# Constructing sliding average over 3 and 3 data points\nsliding &lt;- lapply(1:(length(data)-2), function(i){\n  \n  data[i] + data[i + 1] + data[i + 2]\n  \n})\n\n# Unlisting\nsliding &lt;- unlist(sliding)\n\n# Making holder object for logical -- whether sliding average \n# is deeper than the previous\ndeeper_sliding &lt;- logical(length(sliding))\n\n# Looping over all data points\nfor(i in 2:length(sliding)){\n  # If sliding average is higher than previous, return TRUE\n  # else return FALSE\n  deeper_sliding[i] &lt;- ifelse(sliding[i] &gt; sliding[i-1], TRUE, FALSE)\n}\n\n# True is solution\ntable(deeper_sliding)\n\ndeeper_sliding\nFALSE  TRUE \n  639  1359",
    "crumbs": [
      "2021",
      "Day 1"
    ]
  },
  {
    "objectID": "2022-08/day8.html",
    "href": "2022-08/day8.html",
    "title": "Day 8",
    "section": "",
    "text": "The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they’re curious if this would be a good location for a tree house.\nFirst, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.\nThe Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input). For example:\n30373\n25512\n65332\n33549\n35390\nEach tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest.\nA tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.\nAll of the trees around the edge of the grid are visible - since they are already on the edge, there are no trees to block the view. In this example, that only leaves the interior nine trees to consider:\nThe top-left 5 is visible from the left and top. (It isn’t visible from the right or bottom since other trees of height 5 are in the way.)\nThe top-middle 5 is visible from the top and right.\nThe top-right 1 is not visible from any direction; for it to be visible, there would need to only be trees of height 0 between it and an edge.\nThe left-middle 5 is visible, but only from the right.\nThe center 3 is not visible from any direction; for it to be visible, there would need to be only trees of at most height 2 between it and an edge.\nThe right-middle 3 is visible from the right.\nIn the bottom row, the middle 5 is visible, but the 3 and 4 are not.\nWith 16 trees visible on the edge and another 5 visible in the interior, a total of 21 trees are visible in this arrangement.\nConsider your map; how many trees are visible from outside the grid?\n\ninput &lt;- readLines(\"day8.txt\")\n\ntrees &lt;- strsplit(input, \"\")\ntrees &lt;- lapply(trees, as.numeric)\n\ntree_matrix &lt;- do.call(rbind, trees)\n\ntree_logical &lt;- matrix(TRUE, nrow = nrow(tree_matrix), ncol = ncol(tree_matrix))\n\nfor(i in 2:(nrow(tree_matrix)-1)){\n  for(j in 2:(ncol(tree_matrix)-1)){\n    \n    current &lt;- tree_matrix[i, j]\n    \n    down &lt;- tree_matrix[(i+1):nrow(tree_matrix), j]\n    up &lt;- tree_matrix[(i-1):1, j]\n    \n    right &lt;- tree_matrix[i, (j+1):ncol(tree_matrix)]\n    left &lt;- tree_matrix[i, (j-1):1]\n    \n    tree_logical[i, j] &lt;- ifelse(all(up &lt; current) | all(down &lt; current) | all(right &lt; current) | all(left &lt; current), TRUE, FALSE)\n  }\n}\n\n\nsum(tree_logical)\n\n[1] 1693\n\n\n\n\n\n— Part Two —\nContent with the amount of tree cover available, the Elves just need to know the best spot to build their tree house: they would like to be able to see a lot of trees.\nTo measure the viewing distance from a given tree, look up, down, left, and right from that tree; stop if you reach an edge or at the first tree that is the same height or taller than the tree under consideration. (If a tree is right on the edge, at least one of its viewing distances will be zero.)\nThe Elves don’t care about distant trees taller than those found by the rules above; the proposed tree house has large eaves to keep it dry, so they wouldn’t be able to see higher than the tree house anyway.\nIn the example above, consider the middle 5 in the second row:\n30373 25512 65332 33549 35390\nLooking up, its view is not blocked; it can see 1 tree (of height 3). Looking left, its view is blocked immediately; it can see only 1 tree (of height 5, right next to it). Looking right, its view is not blocked; it can see 2 trees. Looking down, its view is blocked eventually; it can see 2 trees (one of height 3, then the tree of height 5 that blocks its view). A tree’s scenic score is found by multiplying together its viewing distance in each of the four directions. For this tree, this is 4 (found by multiplying 1 * 1 * 2 * 2).\nHowever, you can do even better: consider the tree of height 5 in the middle of the fourth row:\n30373 25512 65332 33549 35390 Looking up, its view is blocked at 2 trees (by another tree with a height of 5). Looking left, its view is not blocked; it can see 2 trees. Looking down, its view is also not blocked; it can see 1 tree. Looking right, its view is blocked at 2 trees (by a massive tree of height 9). This tree’s scenic score is 8 (2 * 2 * 1 * 2); this is the ideal spot for the tree house.\nConsider each tree on your map. What is the highest scenic score possible for any tree?\n\ntree_score &lt;- matrix(0, nrow = nrow(tree_matrix), ncol = ncol(tree_matrix))\n\nfor(i in 2:(nrow(tree_matrix)-1)){\n  for(j in 2:(ncol(tree_matrix)-1)){\n    \n    current &lt;- tree_matrix[i, j]\n    \n    right &lt;- which(tree_matrix[i, (j+1):ncol(tree_matrix)] &gt;= current)[1]\n    right &lt;- ifelse(is.na(right) == TRUE, length((j+1):ncol(tree_matrix)), right)\n  \n    left &lt;- which(tree_matrix[i, (j-1):1] &gt;= current)[1]\n    left &lt;- ifelse(is.na(left) == TRUE, length((j-1):1), left)\n    \n    \n    down &lt;- which(tree_matrix[(i+1):nrow(tree_matrix), j] &gt;= current)[1]\n    down &lt;- ifelse(is.na(down) == TRUE, length((i+1):nrow(tree_matrix)), down)\n    \n    up &lt;- which(tree_matrix[(i-1):1, j] &gt;= current)[1]\n    up &lt;- ifelse(is.na(up) == TRUE, length((i-1):1), up)\n    \n    \n    tree_score[i, j] &lt;- right * left * up * down\n    \n  }\n}\n\ntree_score[which.max(tree_score)]\n\n[1] 422059",
    "crumbs": [
      "2022",
      "Day 8"
    ]
  },
  {
    "objectID": "2022-08/day8.html#treetop-tree-house",
    "href": "2022-08/day8.html#treetop-tree-house",
    "title": "Day 8",
    "section": "",
    "text": "The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they’re curious if this would be a good location for a tree house.\nFirst, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.\nThe Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input). For example:\n30373\n25512\n65332\n33549\n35390\nEach tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest.\nA tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.\nAll of the trees around the edge of the grid are visible - since they are already on the edge, there are no trees to block the view. In this example, that only leaves the interior nine trees to consider:\nThe top-left 5 is visible from the left and top. (It isn’t visible from the right or bottom since other trees of height 5 are in the way.)\nThe top-middle 5 is visible from the top and right.\nThe top-right 1 is not visible from any direction; for it to be visible, there would need to only be trees of height 0 between it and an edge.\nThe left-middle 5 is visible, but only from the right.\nThe center 3 is not visible from any direction; for it to be visible, there would need to be only trees of at most height 2 between it and an edge.\nThe right-middle 3 is visible from the right.\nIn the bottom row, the middle 5 is visible, but the 3 and 4 are not.\nWith 16 trees visible on the edge and another 5 visible in the interior, a total of 21 trees are visible in this arrangement.\nConsider your map; how many trees are visible from outside the grid?\n\ninput &lt;- readLines(\"day8.txt\")\n\ntrees &lt;- strsplit(input, \"\")\ntrees &lt;- lapply(trees, as.numeric)\n\ntree_matrix &lt;- do.call(rbind, trees)\n\ntree_logical &lt;- matrix(TRUE, nrow = nrow(tree_matrix), ncol = ncol(tree_matrix))\n\nfor(i in 2:(nrow(tree_matrix)-1)){\n  for(j in 2:(ncol(tree_matrix)-1)){\n    \n    current &lt;- tree_matrix[i, j]\n    \n    down &lt;- tree_matrix[(i+1):nrow(tree_matrix), j]\n    up &lt;- tree_matrix[(i-1):1, j]\n    \n    right &lt;- tree_matrix[i, (j+1):ncol(tree_matrix)]\n    left &lt;- tree_matrix[i, (j-1):1]\n    \n    tree_logical[i, j] &lt;- ifelse(all(up &lt; current) | all(down &lt; current) | all(right &lt; current) | all(left &lt; current), TRUE, FALSE)\n  }\n}\n\n\nsum(tree_logical)\n\n[1] 1693",
    "crumbs": [
      "2022",
      "Day 8"
    ]
  },
  {
    "objectID": "2022-08/day8.html#part-2",
    "href": "2022-08/day8.html#part-2",
    "title": "Day 8",
    "section": "",
    "text": "— Part Two —\nContent with the amount of tree cover available, the Elves just need to know the best spot to build their tree house: they would like to be able to see a lot of trees.\nTo measure the viewing distance from a given tree, look up, down, left, and right from that tree; stop if you reach an edge or at the first tree that is the same height or taller than the tree under consideration. (If a tree is right on the edge, at least one of its viewing distances will be zero.)\nThe Elves don’t care about distant trees taller than those found by the rules above; the proposed tree house has large eaves to keep it dry, so they wouldn’t be able to see higher than the tree house anyway.\nIn the example above, consider the middle 5 in the second row:\n30373 25512 65332 33549 35390\nLooking up, its view is not blocked; it can see 1 tree (of height 3). Looking left, its view is blocked immediately; it can see only 1 tree (of height 5, right next to it). Looking right, its view is not blocked; it can see 2 trees. Looking down, its view is blocked eventually; it can see 2 trees (one of height 3, then the tree of height 5 that blocks its view). A tree’s scenic score is found by multiplying together its viewing distance in each of the four directions. For this tree, this is 4 (found by multiplying 1 * 1 * 2 * 2).\nHowever, you can do even better: consider the tree of height 5 in the middle of the fourth row:\n30373 25512 65332 33549 35390 Looking up, its view is blocked at 2 trees (by another tree with a height of 5). Looking left, its view is not blocked; it can see 2 trees. Looking down, its view is also not blocked; it can see 1 tree. Looking right, its view is blocked at 2 trees (by a massive tree of height 9). This tree’s scenic score is 8 (2 * 2 * 1 * 2); this is the ideal spot for the tree house.\nConsider each tree on your map. What is the highest scenic score possible for any tree?\n\ntree_score &lt;- matrix(0, nrow = nrow(tree_matrix), ncol = ncol(tree_matrix))\n\nfor(i in 2:(nrow(tree_matrix)-1)){\n  for(j in 2:(ncol(tree_matrix)-1)){\n    \n    current &lt;- tree_matrix[i, j]\n    \n    right &lt;- which(tree_matrix[i, (j+1):ncol(tree_matrix)] &gt;= current)[1]\n    right &lt;- ifelse(is.na(right) == TRUE, length((j+1):ncol(tree_matrix)), right)\n  \n    left &lt;- which(tree_matrix[i, (j-1):1] &gt;= current)[1]\n    left &lt;- ifelse(is.na(left) == TRUE, length((j-1):1), left)\n    \n    \n    down &lt;- which(tree_matrix[(i+1):nrow(tree_matrix), j] &gt;= current)[1]\n    down &lt;- ifelse(is.na(down) == TRUE, length((i+1):nrow(tree_matrix)), down)\n    \n    up &lt;- which(tree_matrix[(i-1):1, j] &gt;= current)[1]\n    up &lt;- ifelse(is.na(up) == TRUE, length((i-1):1), up)\n    \n    \n    tree_score[i, j] &lt;- right * left * up * down\n    \n  }\n}\n\ntree_score[which.max(tree_score)]\n\n[1] 422059",
    "crumbs": [
      "2022",
      "Day 8"
    ]
  },
  {
    "objectID": "2021-08/day8.html",
    "href": "2021-08/day8.html",
    "title": "Day 8",
    "section": "",
    "text": "Day 8\n\n#########################\n######### Day 7 #########\n#########################\n\n\nrm(list = ls())\n\nlibrary(stringr)\n\ndata &lt;- readLines(\"day8.txt\")\n\n#### Part 1 ####\np1_data &lt;- sapply(strsplit(data, \"\\\\|\"), \"[[\", 2) %&gt;% str_trim()\n\np1_data &lt;- strsplit(p1_data, \" \")\n\nall_sums &lt;- sapply(1:length(p1_data), function(y){\n  \n  outputs &lt;- p1_data[[y]] %&gt;% str_split(\" \") %&gt;% unlist() %&gt;% \n    str_split(\"\")\n  \n  sum(sapply(outputs, length) %in% c(2, 4, 3, 7))\n  \n  \n})\n\n# Solution part 1\nsum(all_sums)\n\n[1] 392\n\n#### Part 2 ####\ndisplay &lt;- letters[1:7]\nnumbers &lt;- list(num0 = paste(letters[c(1, 2, 3, 5, 6, 7)], collapse = \"\"),\n                num1 = paste(letters[c(3, 6)], collapse = \"\"),\n                num2 = paste(letters[c(1, 3, 4, 5, 7)], collapse = \"\"),\n                num3 = paste(letters[c(1, 3, 4, 6, 7)], collapse = \"\"),\n                num4 = paste(letters[c(2, 3, 4, 6)], collapse = \"\"),\n                num5 = paste(letters[c(1, 2, 4, 6, 7)], collapse = \"\"),\n                num6 = paste(letters[c(1, 2, 4, 5, 6, 7)], collapse = \"\"),\n                num7 = paste(letters[c(1, 3, 6)], collapse = \"\"),\n                num8 = paste(letters[c(1:7)], collapse = \"\"),\n                num9 = paste(letters[c(1, 2, 3, 4, 6, 7)], collapse = \"\"))\n\nn &lt;- vector(\"numeric\", length(data))\n\nfor(k in 1:length(data)){\n  tmp &lt;- data[k] %&gt;% str_split(\"\\\\|\") %&gt;% unlist() %&gt;% str_trim()\n  s1 &lt;- tmp[1] %&gt;% str_split(\" \") %&gt;% unlist() %&gt;% str_split(\"\")\n  \n  tmp_2long &lt;- s1[[which(sapply(s1, length) == 2)]]\n  tmp_3long &lt;- s1[[which(sapply(s1, length) == 3)]]\n  tmp_4long &lt;- s1[[which(sapply(s1, length) == 4)]]\n  tmp_5long &lt;- s1[which(sapply(s1, length) == 5)]\n  tmp_6long &lt;- s1[which(sapply(s1, length) == 6)]\n  tmp_7long &lt;- s1[[which(sapply(s1, length) == 7)]]\n  \n  config &lt;- vector(\"character\", 7)\n  \n  # Find the character map for this set\n  config[1] &lt;- setdiff(tmp_3long, tmp_2long)\n  config[3] &lt;- unlist(sapply(tmp_6long, function(x) setdiff(tmp_2long, x)))\n  tmp_6long &lt;- tmp_6long[which(colSums(sapply(tmp_6long, function(x) x %in% tmp_2long)) == 2)]\n  \n  config[6] &lt;- setdiff(tmp_2long, config[3])\n  \n  config[4] &lt;- unlist(sapply(tmp_6long, function(x) setdiff(tmp_4long, x)))\n  config[5] &lt;- setdiff(tmp_6long[[which(sapply(tmp_6long, function(x) any(x %in% config[4]) == FALSE))]],\n                       tmp_6long[[which(sapply(tmp_6long, function(x) any(x %in% config[4])))]])\n  \n  config[2] &lt;- setdiff(tmp_4long, config[c(3, 4, 6)])\n  \n  config[7] &lt;- setdiff(tmp_7long, config[1:6])\n  \n  # g = 5\n  # f = 4\n  \n  \n  decode_df &lt;- lapply(s1, function(y){\n    # message(y)\n    input &lt;- y\n    \n    clean &lt;- paste(display[config %in% input], collapse = \"\")\n    \n    tmp_correct &lt;- sapply(numbers, function(x) x == clean)\n    \n    correct &lt;- names(tmp_correct[which(tmp_correct == TRUE)]) %&gt;% str_extract(\"[0-9]+\") %&gt;% as.numeric()\n    \n    decoded &lt;- data.frame(number = correct,\n                          string = paste(sort(input), collapse = \"\"))\n    \n    return(decoded)\n  })\n  \n  decode_df &lt;- do.call(rbind, decode_df)\n  \n  s2 &lt;- tmp[2] %&gt;% str_split(\" \") %&gt;% unlist() %&gt;% str_split(\"\")\n  \n  s2 &lt;- lapply(s2, function(x) x %&gt;% sort() %&gt;% paste(collapse = \"\"))\n  \n  n[k] &lt;- lapply(s2, function(x) decode_df$number[which(decode_df$string == x)]) %&gt;% \n    unlist() %&gt;% paste(collapse = \"\") %&gt;% as.numeric()\n}\n\n# Solution part2: \nsum(n)\n\n[1] 1004688",
    "crumbs": [
      "2021",
      "Day 8"
    ]
  },
  {
    "objectID": "2021-02/day2.html",
    "href": "2021-02/day2.html",
    "title": "Day 2",
    "section": "",
    "text": "Day 2\n\n#########################\n######### Day 2 #########\n#########################\n\n\nrm(list = ls())\n\ndata &lt;- readLines(\"day2.txt\")\n\n### Part 1 ###\n\n# Reading data\n\n# Extracting direction\ndirection &lt;- stringr::str_extract(data, \"^[a-z]+\")\n\n# Extracting units\nunits &lt;- as.numeric(stringr::str_extract(data, \"[0-9]+$\"))\n\n# Making a dataframe of directions and units \ndf &lt;- data.frame(direction,\n                 units)\n\n# Making initial horizontal position\nhorizontal &lt;- 0\n\n# Making intial depth position\ndepth &lt;- 0\n\n# Looping over all data points\nfor(i in 1:nrow(df)){\n  \n  # If direction is \"down\"...\n  if(df$direction[i] == \"down\"){\n    # increase current depth with units of i\n    depth &lt;- depth + df$units[i]\n  }\n  \n  # If direction is \"forward\"...\n  if(df$direction[i] == \"forward\"){\n    # increase current horizontal positions with units of i\n    horizontal &lt;- horizontal + df$units[i]\n  }\n  \n  # If direction is \"up\"...\n  if(df$direction[i] == \"up\"){\n    # decrease depth with units of i\n    depth &lt;- depth - df$units[i]\n  }\n  \n}\n\n# Solution is horizontal position multiplied by depth\nhorizontal * depth\n\n[1] 1459206\n\n### Part 2 ###\n\n# Making new initial positions\nhorizontal &lt;- 0\ndepth &lt;- 0\naim &lt;- 0\n\n# Looping over all data points\nfor(i in 1:nrow(df)){\n  \n  # If direction is \"down\"...\n  if(df$direction[i] == \"down\"){\n    # increase aim by units of i\n    aim &lt;- aim + df$units[i]\n  }\n  \n  # If direction is \"up\"...\n  if(df$direction[i] == \"up\"){\n    # decrease aim by units of i\n    aim &lt;- aim - df$units[i]\n  }\n  \n  # If direction is \"forward\"...\n  if(df$direction[i] == \"forward\"){\n    # increase horizontal position with units of i and ...\n    horizontal &lt;- horizontal + df$units[i]\n    \n    # increase depth with aim multiplied by units of i\n    depth &lt;- depth + (aim * df$units[i])\n  }\n  \n}\n\n# Solution is horizontal position multiplied by depth\nhorizontal * depth\n\n[1] 1320534480",
    "crumbs": [
      "2021",
      "Day 2"
    ]
  },
  {
    "objectID": "2021-05/day5.html",
    "href": "2021-05/day5.html",
    "title": "Day 5",
    "section": "",
    "text": "Day 5\n\n#########################\n######### Day 5 #########\n#########################\nrm(list = ls())\nlibrary(stringr)\n\n\ndata &lt;- readLines(\"day5.txt\")\n\n### Part 1 ###\ndf &lt;- data.frame(str_extract_all(data, \"[0-9]+\", simplify = TRUE))\ndf &lt;- data.frame(apply(df, 2, as.numeric))\nnames(df) &lt;- c(\"x1\", \"y1\", \"x2\", \"y2\")\n\nvert_hor &lt;- df[which(df$x1 == df$x2 | df$y1 == df$y2), ]\n\nlibrary(ggplot2)\n\n\nggplot(vert_hor) +\n  geom_segment(aes(x = x1, xend = x2,\n                   y = y1, yend = y2))\n\n\n\n\n\n\n\ncoord_map &lt;- matrix(0, nrow = 1000, ncol = 1000)\n\nfor(i in 1:nrow(vert_hor)){\n  coord_map[vert_hor$y1[i]:vert_hor$y2[i], vert_hor$x1[i]:vert_hor$x2[i]] &lt;- \n    coord_map[vert_hor$y1[i]:vert_hor$y2[i], vert_hor$x1[i]:vert_hor$x2[i]] + 1\n  \n}\n\n# Solution:\nlength(which(coord_map &gt; 1))\n\n[1] 5585\n\n### Part 2 ###\n\nggplot(df) +\n  geom_segment(aes(x = x1, xend = x2,\n                   y = y1, yend = y2)) +\n  scale_y_continuous(breaks = seq(0, 1000, 10)) +\n  scale_x_continuous(breaks = seq(0, 1000, 10))\n\n\n\n\n\n\n\ncoord_map &lt;- matrix(0, nrow = 1000, ncol = 1000)\n\nfor(i in 1:nrow(df)){\n  \n  if(df$y1[i] == df$y2[i] | df$x1[i] == df$x2[i]){\n    coord_map[df$y1[i]:df$y2[i], df$x1[i]:df$x2[i]] &lt;- \n      coord_map[df$y1[i]:df$y2[i], df$x1[i]:df$x2[i]] + 1\n  } else {\n    diag(coord_map[df$y1[i]:df$y2[i], df$x1[i]:df$x2[i]]) &lt;- \n      diag(coord_map[df$y1[i]:df$y2[i], df$x1[i]:df$x2[i]] + 1)\n  }\n  \n}\n\n# Solution\nlength(which(coord_map &gt; 1))\n\n[1] 17193",
    "crumbs": [
      "2021",
      "Day 5"
    ]
  },
  {
    "objectID": "2022-01/day1.html",
    "href": "2022-01/day1.html",
    "title": "Day 1",
    "section": "",
    "text": "Santa’s reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\nTo supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000 2000 3000\n4000\n5000 6000\n7000 8000 9000\n10000 This list represents the Calories of the food carried by five Elves:\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories. The second Elf is carrying one food item with 4000 Calories. The third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories. The fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories. The fifth Elf is carrying one food item with 10000 Calories. In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\nraw &lt;- readLines(\"day1.txt\")\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nelf_data &lt;- tibble(raw)\nelf_data$elf &lt;- NA\nelf_data$elf[which(elf_data$raw == \"\")] &lt;- 1:length(which(elf_data$raw == \"\"))\n\nelf_data &lt;- \n  elf_data %&gt;% \n  tidyr::fill(elf, .direction = \"up\") %&gt;% \n  filter(raw != \"\") %&gt;% \n  mutate(raw = as.numeric(raw)) %&gt;% \n  group_by(elf) %&gt;% \n  summarize(raw = sum(raw)) %&gt;% \n  arrange(desc(raw))\n\n# Part 1 solution:\nelf_data$raw[1]\n\n[1] 71471\n\n\n\n\n\nBy the time you calculate the answer to the Elves’ question, they’ve already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\nIn the example above, the top three Elves are the fourth Elf (with 24000 Calories), then the third Elf (with 11000 Calories), then the fifth Elf (with 10000 Calories). The sum of the Calories carried by these three elves is 45000.\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n# Part 2 solution:\nelf_data$raw[1:3] %&gt;% sum()\n\n[1] 211189",
    "crumbs": [
      "2022",
      "Day 1"
    ]
  },
  {
    "objectID": "2022-01/day1.html#calorie-counting",
    "href": "2022-01/day1.html#calorie-counting",
    "title": "Day 1",
    "section": "",
    "text": "Santa’s reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\nTo supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000 2000 3000\n4000\n5000 6000\n7000 8000 9000\n10000 This list represents the Calories of the food carried by five Elves:\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories. The second Elf is carrying one food item with 4000 Calories. The third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories. The fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories. The fifth Elf is carrying one food item with 10000 Calories. In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\nraw &lt;- readLines(\"day1.txt\")\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nelf_data &lt;- tibble(raw)\nelf_data$elf &lt;- NA\nelf_data$elf[which(elf_data$raw == \"\")] &lt;- 1:length(which(elf_data$raw == \"\"))\n\nelf_data &lt;- \n  elf_data %&gt;% \n  tidyr::fill(elf, .direction = \"up\") %&gt;% \n  filter(raw != \"\") %&gt;% \n  mutate(raw = as.numeric(raw)) %&gt;% \n  group_by(elf) %&gt;% \n  summarize(raw = sum(raw)) %&gt;% \n  arrange(desc(raw))\n\n# Part 1 solution:\nelf_data$raw[1]\n\n[1] 71471",
    "crumbs": [
      "2022",
      "Day 1"
    ]
  },
  {
    "objectID": "2022-01/day1.html#part-2",
    "href": "2022-01/day1.html#part-2",
    "title": "Day 1",
    "section": "",
    "text": "By the time you calculate the answer to the Elves’ question, they’ve already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\nIn the example above, the top three Elves are the fourth Elf (with 24000 Calories), then the third Elf (with 11000 Calories), then the fifth Elf (with 10000 Calories). The sum of the Calories carried by these three elves is 45000.\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n# Part 2 solution:\nelf_data$raw[1:3] %&gt;% sum()\n\n[1] 211189",
    "crumbs": [
      "2022",
      "Day 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Under construction!",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "2022-06/day6.html",
    "href": "2022-06/day6.html",
    "title": "Day 6",
    "section": "",
    "text": "The preparations are finally complete; you and the Elves leave camp on foot and begin to make your way toward the star fruit grove.\nAs you move through the dense undergrowth, one of the Elves gives you a handheld device. He says that it has many fancy features, but the most important one to set up right now is the communication system.\nHowever, because he’s heard you have significant experience dealing with signal-based systems, he convinced the other Elves that it would be okay to give you their one malfunctioning device - surely you’ll have no problem fixing it.\nAs if inspired by comedic timing, the device emits a few colorful sparks.\nTo be able to communicate with the Elves, the device needs to lock on to their signal. The signal is a series of seemingly-random characters that the device receives one at a time.\nTo fix the communication system, you need to add a subroutine to the device that detects a start-of-packet marker in the datastream. In the protocol being used by the Elves, the start of a packet is indicated by a sequence of four characters that are all different.\nThe device will send your subroutine a datastream buffer (your puzzle input); your subroutine needs to identify the first position where the four most recently received characters were all different. Specifically, it needs to report the number of characters from the beginning of the buffer to the end of the first such four-character marker.\nFor example, suppose you receive the following datastream buffer:\nmjqjpqmgbljsphdztnvjfqwrcgsmlb After the first three characters (mjq) have been received, there haven’t been enough characters received yet to find the marker. The first time a marker could occur is after the fourth character is received, making the most recent four characters mjqj. Because j is repeated, this isn’t a marker.\nThe first time a marker appears is after the seventh character arrives. Once it does, the last four characters received are jpqm, which are all different. In this case, your subroutine should report the value 7, because the first start-of-packet marker is complete after 7 characters have been processed.\nHere are a few more examples:\nbvwbjplbgvbhsrlpgdmjqwftvncz: first marker after character 5 nppdvjthqldpwncqszvftbrmjlhg: first marker after character 6 nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg: first marker after character 10 zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw: first marker after character 11\nHow many characters need to be processed before the first start-of-packet marker is detected?\n\ninput &lt;- readLines(\"day6.txt\")\n\nfindMarker &lt;- function(input, stream_length){\n  \n  # Splitting stream into single characters\n  stream &lt;- strsplit(input, \"\") |&gt; unlist()\n  \n  # Setting up i\n  i &lt;- 0\n  \n  # Repeating until solution is found\n  repeat{  \n    \n    # Updating i\n    i &lt;- i + 1\n    \n    # Storing length of unique characters in current stream segment\n    unique_length &lt;- stream[i:(i + (stream_length-1))] |&gt;\n      unique() |&gt;\n      length()\n    \n    # Checking if stream segment is the correct length\n    if(unique_length == stream_length){\n      \n      # Returning soulution if true\n      solution &lt;- i + (stream_length-1)\n      break\n    }\n    \n  }\n  return(solution)\n}\n\nfindMarker(input, 4)\n\n[1] 1804\n\n\n\n\n\n— Part Two — Your device’s communication system is correctly detecting packets, but still isn’t working. It looks like it also needs to look for messages.\nA start-of-message marker is just like a start-of-packet marker, except it consists of 14 distinct characters rather than 4.\nHere are the first positions of start-of-message markers for all of the above examples:\nmjqjpqmgbljsphdztnvjfqwrcgsmlb: first marker after character 19 bvwbjplbgvbhsrlpgdmjqwftvncz: first marker after character 23 nppdvjthqldpwncqszvftbrmjlhg: first marker after character 23 nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg: first marker after character 29 zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw: first marker after character 26\nHow many characters need to be processed before the first start-of-message marker is detected?\n\nfindMarker(input, 14)\n\n[1] 2508",
    "crumbs": [
      "2022",
      "Day 6"
    ]
  },
  {
    "objectID": "2022-06/day6.html#tuning-trouble",
    "href": "2022-06/day6.html#tuning-trouble",
    "title": "Day 6",
    "section": "",
    "text": "The preparations are finally complete; you and the Elves leave camp on foot and begin to make your way toward the star fruit grove.\nAs you move through the dense undergrowth, one of the Elves gives you a handheld device. He says that it has many fancy features, but the most important one to set up right now is the communication system.\nHowever, because he’s heard you have significant experience dealing with signal-based systems, he convinced the other Elves that it would be okay to give you their one malfunctioning device - surely you’ll have no problem fixing it.\nAs if inspired by comedic timing, the device emits a few colorful sparks.\nTo be able to communicate with the Elves, the device needs to lock on to their signal. The signal is a series of seemingly-random characters that the device receives one at a time.\nTo fix the communication system, you need to add a subroutine to the device that detects a start-of-packet marker in the datastream. In the protocol being used by the Elves, the start of a packet is indicated by a sequence of four characters that are all different.\nThe device will send your subroutine a datastream buffer (your puzzle input); your subroutine needs to identify the first position where the four most recently received characters were all different. Specifically, it needs to report the number of characters from the beginning of the buffer to the end of the first such four-character marker.\nFor example, suppose you receive the following datastream buffer:\nmjqjpqmgbljsphdztnvjfqwrcgsmlb After the first three characters (mjq) have been received, there haven’t been enough characters received yet to find the marker. The first time a marker could occur is after the fourth character is received, making the most recent four characters mjqj. Because j is repeated, this isn’t a marker.\nThe first time a marker appears is after the seventh character arrives. Once it does, the last four characters received are jpqm, which are all different. In this case, your subroutine should report the value 7, because the first start-of-packet marker is complete after 7 characters have been processed.\nHere are a few more examples:\nbvwbjplbgvbhsrlpgdmjqwftvncz: first marker after character 5 nppdvjthqldpwncqszvftbrmjlhg: first marker after character 6 nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg: first marker after character 10 zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw: first marker after character 11\nHow many characters need to be processed before the first start-of-packet marker is detected?\n\ninput &lt;- readLines(\"day6.txt\")\n\nfindMarker &lt;- function(input, stream_length){\n  \n  # Splitting stream into single characters\n  stream &lt;- strsplit(input, \"\") |&gt; unlist()\n  \n  # Setting up i\n  i &lt;- 0\n  \n  # Repeating until solution is found\n  repeat{  \n    \n    # Updating i\n    i &lt;- i + 1\n    \n    # Storing length of unique characters in current stream segment\n    unique_length &lt;- stream[i:(i + (stream_length-1))] |&gt;\n      unique() |&gt;\n      length()\n    \n    # Checking if stream segment is the correct length\n    if(unique_length == stream_length){\n      \n      # Returning soulution if true\n      solution &lt;- i + (stream_length-1)\n      break\n    }\n    \n  }\n  return(solution)\n}\n\nfindMarker(input, 4)\n\n[1] 1804",
    "crumbs": [
      "2022",
      "Day 6"
    ]
  },
  {
    "objectID": "2022-06/day6.html#part-2",
    "href": "2022-06/day6.html#part-2",
    "title": "Day 6",
    "section": "",
    "text": "— Part Two — Your device’s communication system is correctly detecting packets, but still isn’t working. It looks like it also needs to look for messages.\nA start-of-message marker is just like a start-of-packet marker, except it consists of 14 distinct characters rather than 4.\nHere are the first positions of start-of-message markers for all of the above examples:\nmjqjpqmgbljsphdztnvjfqwrcgsmlb: first marker after character 19 bvwbjplbgvbhsrlpgdmjqwftvncz: first marker after character 23 nppdvjthqldpwncqszvftbrmjlhg: first marker after character 23 nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg: first marker after character 29 zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw: first marker after character 26\nHow many characters need to be processed before the first start-of-message marker is detected?\n\nfindMarker(input, 14)\n\n[1] 2508",
    "crumbs": [
      "2022",
      "Day 6"
    ]
  },
  {
    "objectID": "2021-09/day9.html",
    "href": "2021-09/day9.html",
    "title": "Day 9",
    "section": "",
    "text": "Day 9\n\n#########################\n######### Day 9 #########\n#########################\n\n# this doesn't work\nrm(list = ls())\nlibrary(dplyr)\n\n\ndata &lt;- readLines(\"day9.txt\")\n\nlava &lt;- matrix(NA, 100, 100)\n\n\nfor(i in 1:length(data)){\n  \n  lava[i, ] &lt;- strsplit(data[i], \"\") %&gt;% \n    unlist() %&gt;% as.numeric()\n    \n}\n\nlava &lt;- cbind(lava, 99)\nlava &lt;- rbind(lava, 99)\n\nleast_holder &lt;- numeric(0) \nfor(i in 1:100){\n  for(j in 1:100){\n    message(j)\n    current &lt;- lava[i, j]\n    \n    neighbors &lt;- c(lava[i-1, j],\n                   lava[i+1, j],\n                   lava[i, j-1],\n                   lava[i, j+1])\n    \n    if(all(neighbors &gt; current) == TRUE){\n      least_holder &lt;- append(least_holder, current)\n      \n      current_updated &lt;- current\n      while(current_updated + ) # a wrong here\n      \n    }\n    \n  }\n}\nsum(least_holder+1)\n\nleast_holder &lt;- append(least_holder, 1)",
    "crumbs": [
      "2021",
      "Day 9"
    ]
  }
]